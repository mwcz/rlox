<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="790" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="773.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="773.00"> </text><svg id="frames" x="10" width="1180" total_samples="22806"><g><title>.annobin_lto (6 samples, 0.03%)</title><rect x="2.4467%" y="709" width="0.0263%" height="15" fill="rgb(227,0,7)" fg:x="558" fg:w="6"/><text x="2.6967%" y="719.50"></text></g><g><title>&lt;rlox::expr::Binary&lt;L,R&gt; as core::fmt::Display&gt;::fmt (6 samples, 0.03%)</title><rect x="2.4730%" y="709" width="0.0263%" height="15" fill="rgb(217,0,24)" fg:x="564" fg:w="6"/><text x="2.7230%" y="719.50"></text></g><g><title>&lt;rlox::expr::Grouping&lt;E&gt; as core::fmt::Display&gt;::fmt (17 samples, 0.07%)</title><rect x="2.4993%" y="709" width="0.0745%" height="15" fill="rgb(221,193,54)" fg:x="570" fg:w="17"/><text x="2.7493%" y="719.50"></text></g><g><title>&lt;rlox::expr::Literal as core::fmt::Display&gt;::fmt (16 samples, 0.07%)</title><rect x="2.5739%" y="709" width="0.0702%" height="15" fill="rgb(248,212,6)" fg:x="587" fg:w="16"/><text x="2.8239%" y="719.50"></text></g><g><title>&lt;rlox::expr::Unary&lt;R&gt; as core::fmt::Display&gt;::fmt (6 samples, 0.03%)</title><rect x="2.6440%" y="709" width="0.0263%" height="15" fill="rgb(208,68,35)" fg:x="603" fg:w="6"/><text x="2.8940%" y="719.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (680 samples, 2.98%)</title><rect x="2.6703%" y="709" width="2.9817%" height="15" fill="rgb(232,128,0)" fg:x="609" fg:w="680"/><text x="2.9203%" y="719.50">&lt;st..</text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (16 samples, 0.07%)</title><rect x="9.0941%" y="661" width="0.0702%" height="15" fill="rgb(207,160,47)" fg:x="2074" fg:w="16"/><text x="9.3441%" y="671.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (16 samples, 0.07%)</title><rect x="9.0941%" y="645" width="0.0702%" height="15" fill="rgb(228,23,34)" fg:x="2074" fg:w="16"/><text x="9.3441%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.07%)</title><rect x="9.0941%" y="629" width="0.0702%" height="15" fill="rgb(218,30,26)" fg:x="2074" fg:w="16"/><text x="9.3441%" y="639.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (199 samples, 0.87%)</title><rect x="9.0152%" y="677" width="0.8726%" height="15" fill="rgb(220,122,19)" fg:x="2056" fg:w="199"/><text x="9.2652%" y="687.50"></text></g><g><title>std::sys_common::memchr::memrchr (165 samples, 0.72%)</title><rect x="9.1643%" y="661" width="0.7235%" height="15" fill="rgb(250,228,42)" fg:x="2090" fg:w="165"/><text x="9.4143%" y="671.50"></text></g><g><title>std::sys::unix::memchr::memrchr (165 samples, 0.72%)</title><rect x="9.1643%" y="645" width="0.7235%" height="15" fill="rgb(240,193,28)" fg:x="2090" fg:w="165"/><text x="9.4143%" y="655.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (165 samples, 0.72%)</title><rect x="9.1643%" y="629" width="0.7235%" height="15" fill="rgb(216,20,37)" fg:x="2090" fg:w="165"/><text x="9.4143%" y="639.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1,139 samples, 4.99%)</title><rect x="5.6520%" y="709" width="4.9943%" height="15" fill="rgb(206,188,39)" fg:x="1289" fg:w="1139"/><text x="5.9020%" y="719.50">&lt;std::..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (372 samples, 1.63%)</title><rect x="9.0152%" y="693" width="1.6311%" height="15" fill="rgb(217,207,13)" fg:x="2056" fg:w="372"/><text x="9.2652%" y="703.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (173 samples, 0.76%)</title><rect x="9.8877%" y="677" width="0.7586%" height="15" fill="rgb(231,73,38)" fg:x="2255" fg:w="173"/><text x="10.1377%" y="687.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (479 samples, 2.10%)</title><rect x="10.6463%" y="693" width="2.1003%" height="15" fill="rgb(225,20,46)" fg:x="2428" fg:w="479"/><text x="10.8963%" y="703.50">&lt;..</text></g><g><title>__GI___libc_free (22 samples, 0.10%)</title><rect x="12.7466%" y="693" width="0.0965%" height="15" fill="rgb(210,31,41)" fg:x="2907" fg:w="22"/><text x="12.9966%" y="703.50"></text></g><g><title>__memmove_avx_unaligned_erms (48 samples, 0.21%)</title><rect x="12.8431%" y="693" width="0.2105%" height="15" fill="rgb(221,200,47)" fg:x="2929" fg:w="48"/><text x="13.0931%" y="703.50"></text></g><g><title>__memrchr_avx2 (24 samples, 0.11%)</title><rect x="13.0536%" y="693" width="0.1052%" height="15" fill="rgb(226,26,5)" fg:x="2977" fg:w="24"/><text x="13.3036%" y="703.50"></text></g><g><title>_int_free (17 samples, 0.07%)</title><rect x="13.1588%" y="693" width="0.0745%" height="15" fill="rgb(249,33,26)" fg:x="3001" fg:w="17"/><text x="13.4088%" y="703.50"></text></g><g><title>core::fmt::Formatter::write_fmt (16 samples, 0.07%)</title><rect x="13.2334%" y="693" width="0.0702%" height="15" fill="rgb(235,183,28)" fg:x="3018" fg:w="16"/><text x="13.4834%" y="703.50"></text></g><g><title>[expr-example] (744 samples, 3.26%)</title><rect x="10.6463%" y="709" width="3.2623%" height="15" fill="rgb(221,5,38)" fg:x="2428" fg:w="744"/><text x="10.8963%" y="719.50">[ex..</text></g><g><title>core::fmt::write (138 samples, 0.61%)</title><rect x="13.3035%" y="693" width="0.6051%" height="15" fill="rgb(247,18,42)" fg:x="3034" fg:w="138"/><text x="13.5535%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::stdio::StdoutLock&gt; (8 samples, 0.04%)</title><rect x="13.9700%" y="677" width="0.0351%" height="15" fill="rgb(241,131,45)" fg:x="3186" fg:w="8"/><text x="14.2200%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt;&gt; (8 samples, 0.04%)</title><rect x="13.9700%" y="661" width="0.0351%" height="15" fill="rgb(249,31,29)" fg:x="3186" fg:w="8"/><text x="14.2200%" y="671.50"></text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.04%)</title><rect x="13.9700%" y="645" width="0.0351%" height="15" fill="rgb(225,111,53)" fg:x="3186" fg:w="8"/><text x="14.2200%" y="655.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::unlock (8 samples, 0.04%)</title><rect x="13.9700%" y="629" width="0.0351%" height="15" fill="rgb(238,160,17)" fg:x="3186" fg:w="8"/><text x="14.2200%" y="639.50"></text></g><g><title>std::io::Write::write_fmt (9 samples, 0.04%)</title><rect x="14.0051%" y="677" width="0.0395%" height="15" fill="rgb(214,148,48)" fg:x="3194" fg:w="9"/><text x="14.2551%" y="687.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (42 samples, 0.18%)</title><rect x="13.9086%" y="693" width="0.1842%" height="15" fill="rgb(232,36,49)" fg:x="3172" fg:w="42"/><text x="14.1586%" y="703.50"></text></g><g><title>std::io::stdio::Stdout::lock (11 samples, 0.05%)</title><rect x="14.0445%" y="677" width="0.0482%" height="15" fill="rgb(209,103,24)" fg:x="3203" fg:w="11"/><text x="14.2945%" y="687.50"></text></g><g><title>std::io::stdio::Stdout::lock_any (11 samples, 0.05%)</title><rect x="14.0445%" y="661" width="0.0482%" height="15" fill="rgb(229,88,8)" fg:x="3203" fg:w="11"/><text x="14.2945%" y="671.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (11 samples, 0.05%)</title><rect x="14.0445%" y="645" width="0.0482%" height="15" fill="rgb(213,181,19)" fg:x="3203" fg:w="11"/><text x="14.2945%" y="655.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (11 samples, 0.05%)</title><rect x="14.0445%" y="629" width="0.0482%" height="15" fill="rgb(254,191,54)" fg:x="3203" fg:w="11"/><text x="14.2945%" y="639.50"></text></g><g><title>&lt;rlox::expr::Binary&lt;L,R&gt; as core::fmt::Display&gt;::fmt (46 samples, 0.20%)</title><rect x="14.0928%" y="693" width="0.2017%" height="15" fill="rgb(241,83,37)" fg:x="3214" fg:w="46"/><text x="14.3428%" y="703.50"></text></g><g><title>&lt;rlox::expr::Grouping&lt;E&gt; as core::fmt::Display&gt;::fmt (321 samples, 1.41%)</title><rect x="14.2945%" y="693" width="1.4075%" height="15" fill="rgb(233,36,39)" fg:x="3260" fg:w="321"/><text x="14.5445%" y="703.50"></text></g><g><title>&lt;rlox::expr::Literal as core::fmt::Display&gt;::fmt (436 samples, 1.91%)</title><rect x="15.7020%" y="693" width="1.9118%" height="15" fill="rgb(226,3,54)" fg:x="3581" fg:w="436"/><text x="15.9520%" y="703.50">&lt;..</text></g><g><title>&lt;rlox::expr::Unary&lt;R&gt; as core::fmt::Display&gt;::fmt (44 samples, 0.19%)</title><rect x="17.6138%" y="693" width="0.1929%" height="15" fill="rgb(245,192,40)" fg:x="4017" fg:w="44"/><text x="17.8638%" y="703.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1,211 samples, 5.31%)</title><rect x="17.8067%" y="693" width="5.3100%" height="15" fill="rgb(238,167,29)" fg:x="4061" fg:w="1211"/><text x="18.0567%" y="703.50">&lt;std::i..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (40 samples, 0.18%)</title><rect x="24.8926%" y="661" width="0.1754%" height="15" fill="rgb(232,182,51)" fg:x="5677" fg:w="40"/><text x="25.1426%" y="671.50"></text></g><g><title>std::sys_common::memchr::memrchr (40 samples, 0.18%)</title><rect x="24.8926%" y="645" width="0.1754%" height="15" fill="rgb(231,60,39)" fg:x="5677" fg:w="40"/><text x="25.1426%" y="655.50"></text></g><g><title>std::sys::unix::memchr::memrchr (40 samples, 0.18%)</title><rect x="24.8926%" y="629" width="0.1754%" height="15" fill="rgb(208,69,12)" fg:x="5677" fg:w="40"/><text x="25.1426%" y="639.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (40 samples, 0.18%)</title><rect x="24.8926%" y="613" width="0.1754%" height="15" fill="rgb(235,93,37)" fg:x="5677" fg:w="40"/><text x="25.1426%" y="623.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (511 samples, 2.24%)</title><rect x="23.1167%" y="693" width="2.2406%" height="15" fill="rgb(213,116,39)" fg:x="5272" fg:w="511"/><text x="23.3667%" y="703.50">&lt;..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (106 samples, 0.46%)</title><rect x="24.8926%" y="677" width="0.4648%" height="15" fill="rgb(222,207,29)" fg:x="5677" fg:w="106"/><text x="25.1426%" y="687.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (66 samples, 0.29%)</title><rect x="25.0680%" y="661" width="0.2894%" height="15" fill="rgb(206,96,30)" fg:x="5717" fg:w="66"/><text x="25.3180%" y="671.50"></text></g><g><title>[expr-example] (9 samples, 0.04%)</title><rect x="25.3574%" y="693" width="0.0395%" height="15" fill="rgb(218,138,4)" fg:x="5783" fg:w="9"/><text x="25.6074%" y="703.50"></text></g><g><title>__GI___libc_free (9 samples, 0.04%)</title><rect x="25.3574%" y="677" width="0.0395%" height="15" fill="rgb(250,191,14)" fg:x="5783" fg:w="9"/><text x="25.6074%" y="687.50"></text></g><g><title>__GI___libc_free (159 samples, 0.70%)</title><rect x="25.3968%" y="693" width="0.6972%" height="15" fill="rgb(239,60,40)" fg:x="5792" fg:w="159"/><text x="25.6468%" y="703.50"></text></g><g><title>__GI__dl_find_dso_for_object (4 samples, 0.02%)</title><rect x="26.0940%" y="693" width="0.0175%" height="15" fill="rgb(206,27,48)" fg:x="5951" fg:w="4"/><text x="26.3440%" y="703.50"></text></g><g><title>std::io::stdio::_print (4 samples, 0.02%)</title><rect x="26.0940%" y="677" width="0.0175%" height="15" fill="rgb(225,35,8)" fg:x="5951" fg:w="4"/><text x="26.3440%" y="687.50"></text></g><g><title>__libc_write (88 samples, 0.39%)</title><rect x="26.1115%" y="693" width="0.3859%" height="15" fill="rgb(250,213,24)" fg:x="5955" fg:w="88"/><text x="26.3615%" y="703.50"></text></g><g><title>__memmove_avx_unaligned_erms (11 samples, 0.05%)</title><rect x="26.4974%" y="693" width="0.0482%" height="15" fill="rgb(247,123,22)" fg:x="6043" fg:w="11"/><text x="26.7474%" y="703.50"></text></g><g><title>__memrchr_avx2 (3 samples, 0.01%)</title><rect x="26.5456%" y="693" width="0.0132%" height="15" fill="rgb(231,138,38)" fg:x="6054" fg:w="3"/><text x="26.7956%" y="703.50"></text></g><g><title>core::fmt::Formatter::pad (142 samples, 0.62%)</title><rect x="26.5588%" y="693" width="0.6226%" height="15" fill="rgb(231,145,46)" fg:x="6057" fg:w="142"/><text x="26.8088%" y="703.50"></text></g><g><title>core::fmt::Formatter::write_fmt (45 samples, 0.20%)</title><rect x="27.1814%" y="693" width="0.1973%" height="15" fill="rgb(251,118,11)" fg:x="6199" fg:w="45"/><text x="27.4314%" y="703.50"></text></g><g><title>core::fmt::write (192 samples, 0.84%)</title><rect x="27.3788%" y="693" width="0.8419%" height="15" fill="rgb(217,147,25)" fg:x="6244" fg:w="192"/><text x="27.6288%" y="703.50"></text></g><g><title>[unknown] (3,342 samples, 14.65%)</title><rect x="13.9086%" y="709" width="14.6540%" height="15" fill="rgb(247,81,37)" fg:x="3172" fg:w="3342"/><text x="14.1586%" y="719.50">[unknown]</text></g><g><title>std::io::stdio::_print (78 samples, 0.34%)</title><rect x="28.2206%" y="693" width="0.3420%" height="15" fill="rgb(209,12,38)" fg:x="6436" fg:w="78"/><text x="28.4706%" y="703.50"></text></g><g><title>std::io::stdio::print_to (9 samples, 0.04%)</title><rect x="28.5232%" y="677" width="0.0395%" height="15" fill="rgb(227,1,9)" fg:x="6505" fg:w="9"/><text x="28.7732%" y="687.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (9 samples, 0.04%)</title><rect x="28.5232%" y="661" width="0.0395%" height="15" fill="rgb(248,47,43)" fg:x="6505" fg:w="9"/><text x="28.7732%" y="671.50"></text></g><g><title>__GI___libc_free (45 samples, 0.20%)</title><rect x="28.5627%" y="709" width="0.1973%" height="15" fill="rgb(221,10,30)" fg:x="6514" fg:w="45"/><text x="28.8127%" y="719.50"></text></g><g><title>__GI___libc_malloc (117 samples, 0.51%)</title><rect x="28.7600%" y="709" width="0.5130%" height="15" fill="rgb(210,229,1)" fg:x="6559" fg:w="117"/><text x="29.0100%" y="719.50"></text></g><g><title>__GI___pthread_mutex_lock (7 samples, 0.03%)</title><rect x="29.2730%" y="709" width="0.0307%" height="15" fill="rgb(222,148,37)" fg:x="6676" fg:w="7"/><text x="29.5230%" y="719.50"></text></g><g><title>__dso_handle (181 samples, 0.79%)</title><rect x="29.3037%" y="709" width="0.7937%" height="15" fill="rgb(234,67,33)" fg:x="6683" fg:w="181"/><text x="29.5537%" y="719.50"></text></g><g><title>core::fmt::write (181 samples, 0.79%)</title><rect x="29.3037%" y="693" width="0.7937%" height="15" fill="rgb(247,98,35)" fg:x="6683" fg:w="181"/><text x="29.5537%" y="703.50"></text></g><g><title>__memmove_avx_unaligned_erms (28 samples, 0.12%)</title><rect x="30.0973%" y="709" width="0.1228%" height="15" fill="rgb(247,138,52)" fg:x="6864" fg:w="28"/><text x="30.3473%" y="719.50"></text></g><g><title>__memrchr_avx2 (19 samples, 0.08%)</title><rect x="30.2201%" y="709" width="0.0833%" height="15" fill="rgb(213,79,30)" fg:x="6892" fg:w="19"/><text x="30.4701%" y="719.50"></text></g><g><title>__rdl_alloc (24 samples, 0.11%)</title><rect x="30.3034%" y="709" width="0.1052%" height="15" fill="rgb(246,177,23)" fg:x="6911" fg:w="24"/><text x="30.5534%" y="719.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (14 samples, 0.06%)</title><rect x="30.3473%" y="693" width="0.0614%" height="15" fill="rgb(230,62,27)" fg:x="6921" fg:w="14"/><text x="30.5973%" y="703.50"></text></g><g><title>_int_free (177 samples, 0.78%)</title><rect x="30.4087%" y="709" width="0.7761%" height="15" fill="rgb(216,154,8)" fg:x="6935" fg:w="177"/><text x="30.6587%" y="719.50"></text></g><g><title>__GI___libc_malloc (1,027 samples, 4.50%)</title><rect x="31.9609%" y="229" width="4.5032%" height="15" fill="rgb(244,35,45)" fg:x="7289" fg:w="1027"/><text x="32.2109%" y="239.50">__GI_..</text></g><g><title>__rdl_alloc (103 samples, 0.45%)</title><rect x="36.4641%" y="229" width="0.4516%" height="15" fill="rgb(251,115,12)" fg:x="8316" fg:w="103"/><text x="36.7141%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (102 samples, 0.45%)</title><rect x="36.4685%" y="213" width="0.4473%" height="15" fill="rgb(240,54,50)" fg:x="8317" fg:w="102"/><text x="36.7185%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,212 samples, 5.31%)</title><rect x="31.8074%" y="325" width="5.3144%" height="15" fill="rgb(233,84,52)" fg:x="7254" fg:w="1212"/><text x="32.0574%" y="335.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,212 samples, 5.31%)</title><rect x="31.8074%" y="309" width="5.3144%" height="15" fill="rgb(207,117,47)" fg:x="7254" fg:w="1212"/><text x="32.0574%" y="319.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,212 samples, 5.31%)</title><rect x="31.8074%" y="293" width="5.3144%" height="15" fill="rgb(249,43,39)" fg:x="7254" fg:w="1212"/><text x="32.0574%" y="303.50">alloc::..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,212 samples, 5.31%)</title><rect x="31.8074%" y="277" width="5.3144%" height="15" fill="rgb(209,38,44)" fg:x="7254" fg:w="1212"/><text x="32.0574%" y="287.50">&lt;alloc:..</text></g><g><title>alloc::alloc::Global::alloc_impl (1,212 samples, 5.31%)</title><rect x="31.8074%" y="261" width="5.3144%" height="15" fill="rgb(236,212,23)" fg:x="7254" fg:w="1212"/><text x="32.0574%" y="271.50">alloc::..</text></g><g><title>alloc::alloc::alloc (1,200 samples, 5.26%)</title><rect x="31.8600%" y="245" width="5.2618%" height="15" fill="rgb(242,79,21)" fg:x="7266" fg:w="1200"/><text x="32.1100%" y="255.50">alloc:..</text></g><g><title>__rust_alloc (47 samples, 0.21%)</title><rect x="36.9157%" y="229" width="0.2061%" height="15" fill="rgb(211,96,35)" fg:x="8419" fg:w="47"/><text x="37.1657%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,276 samples, 5.60%)</title><rect x="31.8074%" y="341" width="5.5950%" height="15" fill="rgb(253,215,40)" fg:x="7254" fg:w="1276"/><text x="32.0574%" y="351.50">&lt;T as a..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (64 samples, 0.28%)</title><rect x="37.1218%" y="325" width="0.2806%" height="15" fill="rgb(211,81,21)" fg:x="8466" fg:w="64"/><text x="37.3718%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (64 samples, 0.28%)</title><rect x="37.1218%" y="309" width="0.2806%" height="15" fill="rgb(208,190,38)" fg:x="8466" fg:w="64"/><text x="37.3718%" y="319.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (1,280 samples, 5.61%)</title><rect x="31.8074%" y="453" width="5.6126%" height="15" fill="rgb(235,213,38)" fg:x="7254" fg:w="1280"/><text x="32.0574%" y="463.50">&lt;str as..</text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1,280 samples, 5.61%)</title><rect x="31.8074%" y="437" width="5.6126%" height="15" fill="rgb(237,122,38)" fg:x="7254" fg:w="1280"/><text x="32.0574%" y="447.50">&lt;alloc:..</text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1,280 samples, 5.61%)</title><rect x="31.8074%" y="421" width="5.6126%" height="15" fill="rgb(244,218,35)" fg:x="7254" fg:w="1280"/><text x="32.0574%" y="431.50">alloc::..</text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1,280 samples, 5.61%)</title><rect x="31.8074%" y="405" width="5.6126%" height="15" fill="rgb(240,68,47)" fg:x="7254" fg:w="1280"/><text x="32.0574%" y="415.50">alloc::..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1,280 samples, 5.61%)</title><rect x="31.8074%" y="389" width="5.6126%" height="15" fill="rgb(210,16,53)" fg:x="7254" fg:w="1280"/><text x="32.0574%" y="399.50">alloc::..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,280 samples, 5.61%)</title><rect x="31.8074%" y="373" width="5.6126%" height="15" fill="rgb(235,124,12)" fg:x="7254" fg:w="1280"/><text x="32.0574%" y="383.50">alloc::..</text></g><g><title>alloc::slice::hack::to_vec (1,280 samples, 5.61%)</title><rect x="31.8074%" y="357" width="5.6126%" height="15" fill="rgb(224,169,11)" fg:x="7254" fg:w="1280"/><text x="32.0574%" y="367.50">alloc::..</text></g><g><title>expr_example::main (4 samples, 0.02%)</title><rect x="37.4024%" y="341" width="0.0175%" height="15" fill="rgb(250,166,2)" fg:x="8530" fg:w="4"/><text x="37.6524%" y="351.50"></text></g><g><title>core::fmt::Arguments::new_v1 (53 samples, 0.23%)</title><rect x="37.4200%" y="453" width="0.2324%" height="15" fill="rgb(242,216,29)" fg:x="8534" fg:w="53"/><text x="37.6700%" y="463.50"></text></g><g><title>__GI___libc_free (435 samples, 1.91%)</title><rect x="37.6831%" y="261" width="1.9074%" height="15" fill="rgb(230,116,27)" fg:x="8594" fg:w="435"/><text x="37.9331%" y="271.50">_..</text></g><g><title>_int_free (216 samples, 0.95%)</title><rect x="38.6433%" y="245" width="0.9471%" height="15" fill="rgb(228,99,48)" fg:x="8813" fg:w="216"/><text x="38.8933%" y="255.50"></text></g><g><title>__rdl_dealloc (19 samples, 0.08%)</title><rect x="39.5905%" y="261" width="0.0833%" height="15" fill="rgb(253,11,6)" fg:x="9029" fg:w="19"/><text x="39.8405%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (19 samples, 0.08%)</title><rect x="39.5905%" y="245" width="0.0833%" height="15" fill="rgb(247,143,39)" fg:x="9029" fg:w="19"/><text x="39.8405%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (465 samples, 2.04%)</title><rect x="37.6787%" y="293" width="2.0389%" height="15" fill="rgb(236,97,10)" fg:x="8593" fg:w="465"/><text x="37.9287%" y="303.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (465 samples, 2.04%)</title><rect x="37.6787%" y="277" width="2.0389%" height="15" fill="rgb(233,208,19)" fg:x="8593" fg:w="465"/><text x="37.9287%" y="287.50">a..</text></g><g><title>__rust_dealloc (10 samples, 0.04%)</title><rect x="39.6738%" y="261" width="0.0438%" height="15" fill="rgb(216,164,2)" fg:x="9048" fg:w="10"/><text x="39.9238%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (472 samples, 2.07%)</title><rect x="37.6524%" y="373" width="2.0696%" height="15" fill="rgb(220,129,5)" fg:x="8587" fg:w="472"/><text x="37.9024%" y="383.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (470 samples, 2.06%)</title><rect x="37.6611%" y="357" width="2.0609%" height="15" fill="rgb(242,17,10)" fg:x="8589" fg:w="470"/><text x="37.9111%" y="367.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (470 samples, 2.06%)</title><rect x="37.6611%" y="341" width="2.0609%" height="15" fill="rgb(242,107,0)" fg:x="8589" fg:w="470"/><text x="37.9111%" y="351.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (470 samples, 2.06%)</title><rect x="37.6611%" y="325" width="2.0609%" height="15" fill="rgb(251,28,31)" fg:x="8589" fg:w="470"/><text x="37.9111%" y="335.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (470 samples, 2.06%)</title><rect x="37.6611%" y="309" width="2.0609%" height="15" fill="rgb(233,223,10)" fg:x="8589" fg:w="470"/><text x="37.9111%" y="319.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;rlox::expr::Literal&gt; (489 samples, 2.14%)</title><rect x="37.6524%" y="405" width="2.1442%" height="15" fill="rgb(215,21,27)" fg:x="8587" fg:w="489"/><text x="37.9024%" y="415.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;rlox::token::Token&gt; (489 samples, 2.14%)</title><rect x="37.6524%" y="389" width="2.1442%" height="15" fill="rgb(232,23,21)" fg:x="8587" fg:w="489"/><text x="37.9024%" y="399.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;rlox::token_type::TokenType&gt; (17 samples, 0.07%)</title><rect x="39.7220%" y="373" width="0.0745%" height="15" fill="rgb(244,5,23)" fg:x="9059" fg:w="17"/><text x="39.9720%" y="383.50"></text></g><g><title>__GI___libc_free (376 samples, 1.65%)</title><rect x="39.8448%" y="277" width="1.6487%" height="15" fill="rgb(226,81,46)" fg:x="9087" fg:w="376"/><text x="40.0948%" y="287.50"></text></g><g><title>_int_free (167 samples, 0.73%)</title><rect x="40.7612%" y="261" width="0.7323%" height="15" fill="rgb(247,70,30)" fg:x="9296" fg:w="167"/><text x="41.0112%" y="271.50"></text></g><g><title>__rdl_dealloc (12 samples, 0.05%)</title><rect x="41.4935%" y="277" width="0.0526%" height="15" fill="rgb(212,68,19)" fg:x="9463" fg:w="12"/><text x="41.7435%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (12 samples, 0.05%)</title><rect x="41.4935%" y="261" width="0.0526%" height="15" fill="rgb(240,187,13)" fg:x="9463" fg:w="12"/><text x="41.7435%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (403 samples, 1.77%)</title><rect x="39.8229%" y="309" width="1.7671%" height="15" fill="rgb(223,113,26)" fg:x="9082" fg:w="403"/><text x="40.0729%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (403 samples, 1.77%)</title><rect x="39.8229%" y="293" width="1.7671%" height="15" fill="rgb(206,192,2)" fg:x="9082" fg:w="403"/><text x="40.0729%" y="303.50"></text></g><g><title>__rust_dealloc (10 samples, 0.04%)</title><rect x="41.5461%" y="277" width="0.0438%" height="15" fill="rgb(241,108,4)" fg:x="9475" fg:w="10"/><text x="41.7961%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (415 samples, 1.82%)</title><rect x="39.7965%" y="389" width="1.8197%" height="15" fill="rgb(247,173,49)" fg:x="9076" fg:w="415"/><text x="40.0465%" y="399.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (410 samples, 1.80%)</title><rect x="39.8185%" y="373" width="1.7978%" height="15" fill="rgb(224,114,35)" fg:x="9081" fg:w="410"/><text x="40.0685%" y="383.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (410 samples, 1.80%)</title><rect x="39.8185%" y="357" width="1.7978%" height="15" fill="rgb(245,159,27)" fg:x="9081" fg:w="410"/><text x="40.0685%" y="367.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (410 samples, 1.80%)</title><rect x="39.8185%" y="341" width="1.7978%" height="15" fill="rgb(245,172,44)" fg:x="9081" fg:w="410"/><text x="40.0685%" y="351.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (410 samples, 1.80%)</title><rect x="39.8185%" y="325" width="1.7978%" height="15" fill="rgb(236,23,11)" fg:x="9081" fg:w="410"/><text x="40.0685%" y="335.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (6 samples, 0.03%)</title><rect x="41.5899%" y="309" width="0.0263%" height="15" fill="rgb(205,117,38)" fg:x="9485" fg:w="6"/><text x="41.8399%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::expr::Grouping&lt;rlox::expr::Unary&lt;rlox::expr::Literal&gt;&gt;&gt; (916 samples, 4.02%)</title><rect x="37.6524%" y="437" width="4.0165%" height="15" fill="rgb(237,72,25)" fg:x="8587" fg:w="916"/><text x="37.9024%" y="447.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;rlox::expr::Unary&lt;rlox::expr::Literal&gt;&gt; (916 samples, 4.02%)</title><rect x="37.6524%" y="421" width="4.0165%" height="15" fill="rgb(244,70,9)" fg:x="8587" fg:w="916"/><text x="37.9024%" y="431.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;rlox::token::Token&gt; (427 samples, 1.87%)</title><rect x="39.7965%" y="405" width="1.8723%" height="15" fill="rgb(217,125,39)" fg:x="9076" fg:w="427"/><text x="40.0465%" y="415.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;rlox::token_type::TokenType&gt; (12 samples, 0.05%)</title><rect x="41.6162%" y="389" width="0.0526%" height="15" fill="rgb(235,36,10)" fg:x="9491" fg:w="12"/><text x="41.8662%" y="399.50"></text></g><g><title>__GI___libc_free (417 samples, 1.83%)</title><rect x="41.7302%" y="293" width="1.8285%" height="15" fill="rgb(251,123,47)" fg:x="9517" fg:w="417"/><text x="41.9802%" y="303.50">_..</text></g><g><title>_int_free (199 samples, 0.87%)</title><rect x="42.6861%" y="277" width="0.8726%" height="15" fill="rgb(221,13,13)" fg:x="9735" fg:w="199"/><text x="42.9361%" y="287.50"></text></g><g><title>__rdl_dealloc (20 samples, 0.09%)</title><rect x="43.5587%" y="293" width="0.0877%" height="15" fill="rgb(238,131,9)" fg:x="9934" fg:w="20"/><text x="43.8087%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (20 samples, 0.09%)</title><rect x="43.5587%" y="277" width="0.0877%" height="15" fill="rgb(211,50,8)" fg:x="9934" fg:w="20"/><text x="43.8087%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (442 samples, 1.94%)</title><rect x="41.7302%" y="309" width="1.9381%" height="15" fill="rgb(245,182,24)" fg:x="9517" fg:w="442"/><text x="41.9802%" y="319.50">a..</text></g><g><title>__rust_dealloc (5 samples, 0.02%)</title><rect x="43.6464%" y="293" width="0.0219%" height="15" fill="rgb(242,14,37)" fg:x="9954" fg:w="5"/><text x="43.8964%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (453 samples, 1.99%)</title><rect x="41.7302%" y="325" width="1.9863%" height="15" fill="rgb(246,228,12)" fg:x="9517" fg:w="453"/><text x="41.9802%" y="335.50">&lt;..</text></g><g><title>expr_example::main (11 samples, 0.05%)</title><rect x="43.6683%" y="309" width="0.0482%" height="15" fill="rgb(213,55,15)" fg:x="9959" fg:w="11"/><text x="43.9183%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (475 samples, 2.08%)</title><rect x="41.6689%" y="405" width="2.0828%" height="15" fill="rgb(209,9,3)" fg:x="9503" fg:w="475"/><text x="41.9189%" y="415.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (470 samples, 2.06%)</title><rect x="41.6908%" y="389" width="2.0609%" height="15" fill="rgb(230,59,30)" fg:x="9508" fg:w="470"/><text x="41.9408%" y="399.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (470 samples, 2.06%)</title><rect x="41.6908%" y="373" width="2.0609%" height="15" fill="rgb(209,121,21)" fg:x="9508" fg:w="470"/><text x="41.9408%" y="383.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (470 samples, 2.06%)</title><rect x="41.6908%" y="357" width="2.0609%" height="15" fill="rgb(220,109,13)" fg:x="9508" fg:w="470"/><text x="41.9408%" y="367.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (470 samples, 2.06%)</title><rect x="41.6908%" y="341" width="2.0609%" height="15" fill="rgb(232,18,1)" fg:x="9508" fg:w="470"/><text x="41.9408%" y="351.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (8 samples, 0.04%)</title><rect x="43.7166%" y="325" width="0.0351%" height="15" fill="rgb(215,41,42)" fg:x="9970" fg:w="8"/><text x="43.9666%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::expr::Literal&gt; (493 samples, 2.16%)</title><rect x="41.6689%" y="437" width="2.1617%" height="15" fill="rgb(224,123,36)" fg:x="9503" fg:w="493"/><text x="41.9189%" y="447.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;rlox::token::Token&gt; (493 samples, 2.16%)</title><rect x="41.6689%" y="421" width="2.1617%" height="15" fill="rgb(240,125,3)" fg:x="9503" fg:w="493"/><text x="41.9189%" y="431.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;rlox::token_type::TokenType&gt; (18 samples, 0.08%)</title><rect x="43.7516%" y="405" width="0.0789%" height="15" fill="rgb(205,98,50)" fg:x="9978" fg:w="18"/><text x="44.0016%" y="415.50"></text></g><g><title>__GI___libc_free (367 samples, 1.61%)</title><rect x="43.8744%" y="309" width="1.6092%" height="15" fill="rgb(205,185,37)" fg:x="10006" fg:w="367"/><text x="44.1244%" y="319.50"></text></g><g><title>_int_free (184 samples, 0.81%)</title><rect x="44.6768%" y="293" width="0.8068%" height="15" fill="rgb(238,207,15)" fg:x="10189" fg:w="184"/><text x="44.9268%" y="303.50"></text></g><g><title>__rdl_dealloc (20 samples, 0.09%)</title><rect x="45.4836%" y="309" width="0.0877%" height="15" fill="rgb(213,199,42)" fg:x="10373" fg:w="20"/><text x="45.7336%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (20 samples, 0.09%)</title><rect x="45.4836%" y="293" width="0.0877%" height="15" fill="rgb(235,201,11)" fg:x="10373" fg:w="20"/><text x="45.7336%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (394 samples, 1.73%)</title><rect x="43.8744%" y="341" width="1.7276%" height="15" fill="rgb(207,46,11)" fg:x="10006" fg:w="394"/><text x="44.1244%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (394 samples, 1.73%)</title><rect x="43.8744%" y="325" width="1.7276%" height="15" fill="rgb(241,35,35)" fg:x="10006" fg:w="394"/><text x="44.1244%" y="335.50"></text></g><g><title>__rust_dealloc (7 samples, 0.03%)</title><rect x="45.5713%" y="309" width="0.0307%" height="15" fill="rgb(243,32,47)" fg:x="10393" fg:w="7"/><text x="45.8213%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (405 samples, 1.78%)</title><rect x="43.8306%" y="421" width="1.7758%" height="15" fill="rgb(247,202,23)" fg:x="9996" fg:w="405"/><text x="44.0806%" y="431.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (400 samples, 1.75%)</title><rect x="43.8525%" y="405" width="1.7539%" height="15" fill="rgb(219,102,11)" fg:x="10001" fg:w="400"/><text x="44.1025%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (400 samples, 1.75%)</title><rect x="43.8525%" y="389" width="1.7539%" height="15" fill="rgb(243,110,44)" fg:x="10001" fg:w="400"/><text x="44.1025%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (400 samples, 1.75%)</title><rect x="43.8525%" y="373" width="1.7539%" height="15" fill="rgb(222,74,54)" fg:x="10001" fg:w="400"/><text x="44.1025%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (400 samples, 1.75%)</title><rect x="43.8525%" y="357" width="1.7539%" height="15" fill="rgb(216,99,12)" fg:x="10001" fg:w="400"/><text x="44.1025%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::expr::Binary&lt;rlox::expr::Grouping&lt;rlox::expr::Unary&lt;rlox::expr::Literal&gt;&gt;,rlox::expr::Literal&gt;&gt; (1,826 samples, 8.01%)</title><rect x="37.6524%" y="453" width="8.0067%" height="15" fill="rgb(226,22,26)" fg:x="8587" fg:w="1826"/><text x="37.9024%" y="463.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;rlox::token::Token&gt; (417 samples, 1.83%)</title><rect x="43.8306%" y="437" width="1.8285%" height="15" fill="rgb(217,163,10)" fg:x="9996" fg:w="417"/><text x="44.0806%" y="447.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;rlox::token_type::TokenType&gt; (12 samples, 0.05%)</title><rect x="45.6064%" y="421" width="0.0526%" height="15" fill="rgb(213,25,53)" fg:x="10401" fg:w="12"/><text x="45.8564%" y="431.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (25 samples, 0.11%)</title><rect x="47.0885%" y="389" width="0.1096%" height="15" fill="rgb(252,105,26)" fg:x="10739" fg:w="25"/><text x="47.3385%" y="399.50"></text></g><g><title>__GI___pthread_mutex_unlock (17 samples, 0.07%)</title><rect x="47.1981%" y="325" width="0.0745%" height="15" fill="rgb(220,39,43)" fg:x="10764" fg:w="17"/><text x="47.4481%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::stdio::StdoutLock&gt; (453 samples, 1.99%)</title><rect x="47.1981%" y="389" width="1.9863%" height="15" fill="rgb(229,68,48)" fg:x="10764" fg:w="453"/><text x="47.4481%" y="399.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt;&gt; (453 samples, 1.99%)</title><rect x="47.1981%" y="373" width="1.9863%" height="15" fill="rgb(252,8,32)" fg:x="10764" fg:w="453"/><text x="47.4481%" y="383.50">c..</text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (453 samples, 1.99%)</title><rect x="47.1981%" y="357" width="1.9863%" height="15" fill="rgb(223,20,43)" fg:x="10764" fg:w="453"/><text x="47.4481%" y="367.50">&lt;..</text></g><g><title>std::sys::unix::mutex::ReentrantMutex::unlock (453 samples, 1.99%)</title><rect x="47.1981%" y="341" width="1.9863%" height="15" fill="rgb(229,81,49)" fg:x="10764" fg:w="453"/><text x="47.4481%" y="351.50">s..</text></g><g><title>__pthread_mutex_unlock_usercnt (436 samples, 1.91%)</title><rect x="47.2726%" y="325" width="1.9118%" height="15" fill="rgb(236,28,36)" fg:x="10781" fg:w="436"/><text x="47.5226%" y="335.50">_..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.03%)</title><rect x="50.0614%" y="357" width="0.0263%" height="15" fill="rgb(249,185,26)" fg:x="11417" fg:w="6"/><text x="50.3114%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (6 samples, 0.03%)</title><rect x="50.0614%" y="341" width="0.0263%" height="15" fill="rgb(249,174,33)" fg:x="11417" fg:w="6"/><text x="50.3114%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (18 samples, 0.08%)</title><rect x="50.5349%" y="213" width="0.0789%" height="15" fill="rgb(233,201,37)" fg:x="11525" fg:w="18"/><text x="50.7849%" y="223.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (25 samples, 0.11%)</title><rect x="50.5349%" y="341" width="0.1096%" height="15" fill="rgb(221,78,26)" fg:x="11525" fg:w="25"/><text x="50.7849%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (25 samples, 0.11%)</title><rect x="50.5349%" y="325" width="0.1096%" height="15" fill="rgb(250,127,30)" fg:x="11525" fg:w="25"/><text x="50.7849%" y="335.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (25 samples, 0.11%)</title><rect x="50.5349%" y="309" width="0.1096%" height="15" fill="rgb(230,49,44)" fg:x="11525" fg:w="25"/><text x="50.7849%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (25 samples, 0.11%)</title><rect x="50.5349%" y="293" width="0.1096%" height="15" fill="rgb(229,67,23)" fg:x="11525" fg:w="25"/><text x="50.7849%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (25 samples, 0.11%)</title><rect x="50.5349%" y="277" width="0.1096%" height="15" fill="rgb(249,83,47)" fg:x="11525" fg:w="25"/><text x="50.7849%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (25 samples, 0.11%)</title><rect x="50.5349%" y="261" width="0.1096%" height="15" fill="rgb(215,43,3)" fg:x="11525" fg:w="25"/><text x="50.7849%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (25 samples, 0.11%)</title><rect x="50.5349%" y="245" width="0.1096%" height="15" fill="rgb(238,154,13)" fg:x="11525" fg:w="25"/><text x="50.7849%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (25 samples, 0.11%)</title><rect x="50.5349%" y="229" width="0.1096%" height="15" fill="rgb(219,56,2)" fg:x="11525" fg:w="25"/><text x="50.7849%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.03%)</title><rect x="50.6139%" y="213" width="0.0307%" height="15" fill="rgb(233,0,4)" fg:x="11543" fg:w="7"/><text x="50.8639%" y="223.50"></text></g><g><title>core::fmt::Arguments::new_v1 (60 samples, 0.26%)</title><rect x="50.6446%" y="341" width="0.2631%" height="15" fill="rgb(235,30,7)" fg:x="11550" fg:w="60"/><text x="50.8946%" y="351.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (54 samples, 0.24%)</title><rect x="53.2404%" y="309" width="0.2368%" height="15" fill="rgb(250,79,13)" fg:x="12142" fg:w="54"/><text x="53.4904%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (32 samples, 0.14%)</title><rect x="53.3368%" y="293" width="0.1403%" height="15" fill="rgb(211,146,34)" fg:x="12164" fg:w="32"/><text x="53.5868%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (29 samples, 0.13%)</title><rect x="53.3500%" y="277" width="0.1272%" height="15" fill="rgb(228,22,38)" fg:x="12167" fg:w="29"/><text x="53.6000%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (29 samples, 0.13%)</title><rect x="53.3500%" y="261" width="0.1272%" height="15" fill="rgb(235,168,5)" fg:x="12167" fg:w="29"/><text x="53.6000%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (27 samples, 0.12%)</title><rect x="53.3588%" y="245" width="0.1184%" height="15" fill="rgb(221,155,16)" fg:x="12169" fg:w="27"/><text x="53.6088%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.09%)</title><rect x="53.4772%" y="309" width="0.0921%" height="15" fill="rgb(215,215,53)" fg:x="12196" fg:w="21"/><text x="53.7272%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (21 samples, 0.09%)</title><rect x="53.4772%" y="293" width="0.0921%" height="15" fill="rgb(223,4,10)" fg:x="12196" fg:w="21"/><text x="53.7272%" y="303.50"></text></g><g><title>core::fmt::Arguments::new_v1 (37 samples, 0.16%)</title><rect x="54.1217%" y="293" width="0.1622%" height="15" fill="rgb(234,103,6)" fg:x="12343" fg:w="37"/><text x="54.3717%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.03%)</title><rect x="55.8800%" y="261" width="0.0307%" height="15" fill="rgb(227,97,0)" fg:x="12744" fg:w="7"/><text x="56.1300%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (7 samples, 0.03%)</title><rect x="55.8800%" y="245" width="0.0307%" height="15" fill="rgb(234,150,53)" fg:x="12744" fg:w="7"/><text x="56.1300%" y="255.50"></text></g><g><title>core::fmt::Arguments::new_v1 (42 samples, 0.18%)</title><rect x="56.2440%" y="245" width="0.1842%" height="15" fill="rgb(228,201,54)" fg:x="12827" fg:w="42"/><text x="56.4940%" y="255.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (75 samples, 0.33%)</title><rect x="58.4057%" y="213" width="0.3289%" height="15" fill="rgb(222,22,37)" fg:x="13320" fg:w="75"/><text x="58.6557%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (36 samples, 0.16%)</title><rect x="58.5767%" y="197" width="0.1579%" height="15" fill="rgb(237,53,32)" fg:x="13359" fg:w="36"/><text x="58.8267%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (35 samples, 0.15%)</title><rect x="58.5811%" y="181" width="0.1535%" height="15" fill="rgb(233,25,53)" fg:x="13360" fg:w="35"/><text x="58.8311%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (35 samples, 0.15%)</title><rect x="58.5811%" y="165" width="0.1535%" height="15" fill="rgb(210,40,34)" fg:x="13360" fg:w="35"/><text x="58.8311%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (33 samples, 0.14%)</title><rect x="58.5898%" y="149" width="0.1447%" height="15" fill="rgb(241,220,44)" fg:x="13362" fg:w="33"/><text x="58.8398%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.06%)</title><rect x="58.7345%" y="213" width="0.0614%" height="15" fill="rgb(235,28,35)" fg:x="13395" fg:w="14"/><text x="58.9845%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (14 samples, 0.06%)</title><rect x="58.7345%" y="197" width="0.0614%" height="15" fill="rgb(210,56,17)" fg:x="13395" fg:w="14"/><text x="58.9845%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (19 samples, 0.08%)</title><rect x="59.0502%" y="69" width="0.0833%" height="15" fill="rgb(224,130,29)" fg:x="13467" fg:w="19"/><text x="59.3002%" y="79.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (42 samples, 0.18%)</title><rect x="59.0502%" y="197" width="0.1842%" height="15" fill="rgb(235,212,8)" fg:x="13467" fg:w="42"/><text x="59.3002%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (42 samples, 0.18%)</title><rect x="59.0502%" y="181" width="0.1842%" height="15" fill="rgb(223,33,50)" fg:x="13467" fg:w="42"/><text x="59.3002%" y="191.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (42 samples, 0.18%)</title><rect x="59.0502%" y="165" width="0.1842%" height="15" fill="rgb(219,149,13)" fg:x="13467" fg:w="42"/><text x="59.3002%" y="175.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (42 samples, 0.18%)</title><rect x="59.0502%" y="149" width="0.1842%" height="15" fill="rgb(250,156,29)" fg:x="13467" fg:w="42"/><text x="59.3002%" y="159.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (42 samples, 0.18%)</title><rect x="59.0502%" y="133" width="0.1842%" height="15" fill="rgb(216,193,19)" fg:x="13467" fg:w="42"/><text x="59.3002%" y="143.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (42 samples, 0.18%)</title><rect x="59.0502%" y="117" width="0.1842%" height="15" fill="rgb(216,135,14)" fg:x="13467" fg:w="42"/><text x="59.3002%" y="127.50"></text></g><g><title>alloc::slice::hack::to_vec (42 samples, 0.18%)</title><rect x="59.0502%" y="101" width="0.1842%" height="15" fill="rgb(241,47,5)" fg:x="13467" fg:w="42"/><text x="59.3002%" y="111.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (42 samples, 0.18%)</title><rect x="59.0502%" y="85" width="0.1842%" height="15" fill="rgb(233,42,35)" fg:x="13467" fg:w="42"/><text x="59.3002%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (23 samples, 0.10%)</title><rect x="59.1336%" y="69" width="0.1009%" height="15" fill="rgb(231,13,6)" fg:x="13486" fg:w="23"/><text x="59.3836%" y="79.50"></text></g><g><title>core::fmt::Arguments::new_v1 (54 samples, 0.24%)</title><rect x="59.2344%" y="197" width="0.2368%" height="15" fill="rgb(207,181,40)" fg:x="13509" fg:w="54"/><text x="59.4844%" y="207.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (51 samples, 0.22%)</title><rect x="60.4797%" y="165" width="0.2236%" height="15" fill="rgb(254,173,49)" fg:x="13793" fg:w="51"/><text x="60.7297%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (37 samples, 0.16%)</title><rect x="60.5411%" y="149" width="0.1622%" height="15" fill="rgb(221,1,38)" fg:x="13807" fg:w="37"/><text x="60.7911%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (36 samples, 0.16%)</title><rect x="60.5455%" y="133" width="0.1579%" height="15" fill="rgb(206,124,46)" fg:x="13808" fg:w="36"/><text x="60.7955%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (36 samples, 0.16%)</title><rect x="60.5455%" y="117" width="0.1579%" height="15" fill="rgb(249,21,11)" fg:x="13808" fg:w="36"/><text x="60.7955%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (33 samples, 0.14%)</title><rect x="60.5586%" y="101" width="0.1447%" height="15" fill="rgb(222,201,40)" fg:x="13811" fg:w="33"/><text x="60.8086%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="60.7033%" y="165" width="0.0132%" height="15" fill="rgb(235,61,29)" fg:x="13844" fg:w="3"/><text x="60.9533%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (3 samples, 0.01%)</title><rect x="60.7033%" y="149" width="0.0132%" height="15" fill="rgb(219,207,3)" fg:x="13844" fg:w="3"/><text x="60.9533%" y="159.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (11 samples, 0.05%)</title><rect x="60.8963%" y="101" width="0.0482%" height="15" fill="rgb(222,56,46)" fg:x="13888" fg:w="11"/><text x="61.1463%" y="111.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::spare_capacity (5 samples, 0.02%)</title><rect x="60.9226%" y="85" width="0.0219%" height="15" fill="rgb(239,76,54)" fg:x="13894" fg:w="5"/><text x="61.1726%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (5 samples, 0.02%)</title><rect x="60.9226%" y="69" width="0.0219%" height="15" fill="rgb(231,124,27)" fg:x="13894" fg:w="5"/><text x="61.1726%" y="79.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (30 samples, 0.13%)</title><rect x="60.9708%" y="85" width="0.1315%" height="15" fill="rgb(249,195,6)" fg:x="13905" fg:w="30"/><text x="61.2208%" y="95.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (30 samples, 0.13%)</title><rect x="60.9708%" y="69" width="0.1315%" height="15" fill="rgb(237,174,47)" fg:x="13905" fg:w="30"/><text x="61.2208%" y="79.50"></text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::flush_if_completed_line (37 samples, 0.16%)</title><rect x="60.9445%" y="101" width="0.1622%" height="15" fill="rgb(206,201,31)" fg:x="13899" fg:w="37"/><text x="61.1945%" y="111.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (159 samples, 0.70%)</title><rect x="60.8963%" y="117" width="0.6972%" height="15" fill="rgb(231,57,52)" fg:x="13888" fg:w="159"/><text x="61.1463%" y="127.50"></text></g><g><title>std::sys_common::memchr::memrchr (111 samples, 0.49%)</title><rect x="61.1067%" y="101" width="0.4867%" height="15" fill="rgb(248,177,22)" fg:x="13936" fg:w="111"/><text x="61.3567%" y="111.50"></text></g><g><title>std::sys::unix::memchr::memrchr (111 samples, 0.49%)</title><rect x="61.1067%" y="85" width="0.4867%" height="15" fill="rgb(215,211,37)" fg:x="13936" fg:w="111"/><text x="61.3567%" y="95.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (111 samples, 0.49%)</title><rect x="61.1067%" y="69" width="0.4867%" height="15" fill="rgb(241,128,51)" fg:x="13936" fg:w="111"/><text x="61.3567%" y="79.50"></text></g><g><title>__memrchr_avx2 (91 samples, 0.40%)</title><rect x="61.1944%" y="53" width="0.3990%" height="15" fill="rgb(227,165,31)" fg:x="13956" fg:w="91"/><text x="61.4444%" y="63.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (281 samples, 1.23%)</title><rect x="60.8963%" y="133" width="1.2321%" height="15" fill="rgb(228,167,24)" fg:x="13888" fg:w="281"/><text x="61.1463%" y="143.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (122 samples, 0.53%)</title><rect x="61.5934%" y="117" width="0.5349%" height="15" fill="rgb(228,143,12)" fg:x="14047" fg:w="122"/><text x="61.8434%" y="127.50"></text></g><g><title>__memmove_avx_unaligned_erms (83 samples, 0.36%)</title><rect x="61.7644%" y="101" width="0.3639%" height="15" fill="rgb(249,149,8)" fg:x="14086" fg:w="83"/><text x="62.0144%" y="111.50"></text></g><g><title>core::cell::BorrowRefMut::new (31 samples, 0.14%)</title><rect x="62.1284%" y="101" width="0.1359%" height="15" fill="rgb(243,35,44)" fg:x="14169" fg:w="31"/><text x="62.3784%" y="111.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (13 samples, 0.06%)</title><rect x="62.2073%" y="85" width="0.0570%" height="15" fill="rgb(246,89,9)" fg:x="14187" fg:w="13"/><text x="62.4573%" y="95.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (13 samples, 0.06%)</title><rect x="62.2073%" y="69" width="0.0570%" height="15" fill="rgb(233,213,13)" fg:x="14187" fg:w="13"/><text x="62.4573%" y="79.50"></text></g><g><title>core::mem::replace (13 samples, 0.06%)</title><rect x="62.2073%" y="53" width="0.0570%" height="15" fill="rgb(233,141,41)" fg:x="14187" fg:w="13"/><text x="62.4573%" y="63.50"></text></g><g><title>core::ptr::write (13 samples, 0.06%)</title><rect x="62.2073%" y="37" width="0.0570%" height="15" fill="rgb(239,167,4)" fg:x="14187" fg:w="13"/><text x="62.4573%" y="47.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (38 samples, 0.17%)</title><rect x="62.1284%" y="133" width="0.1666%" height="15" fill="rgb(209,217,16)" fg:x="14169" fg:w="38"/><text x="62.3784%" y="143.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (38 samples, 0.17%)</title><rect x="62.1284%" y="117" width="0.1666%" height="15" fill="rgb(219,88,35)" fg:x="14169" fg:w="38"/><text x="62.3784%" y="127.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (7 samples, 0.03%)</title><rect x="62.2643%" y="101" width="0.0307%" height="15" fill="rgb(220,193,23)" fg:x="14200" fg:w="7"/><text x="62.5143%" y="111.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (384 samples, 1.68%)</title><rect x="60.7165%" y="165" width="1.6838%" height="15" fill="rgb(230,90,52)" fg:x="13847" fg:w="384"/><text x="60.9665%" y="175.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (362 samples, 1.59%)</title><rect x="60.8129%" y="149" width="1.5873%" height="15" fill="rgb(252,106,19)" fg:x="13869" fg:w="362"/><text x="61.0629%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt; (24 samples, 0.11%)</title><rect x="62.2950%" y="133" width="0.1052%" height="15" fill="rgb(206,74,20)" fg:x="14207" fg:w="24"/><text x="62.5450%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (24 samples, 0.11%)</title><rect x="62.2950%" y="117" width="0.1052%" height="15" fill="rgb(230,138,44)" fg:x="14207" fg:w="24"/><text x="62.5450%" y="127.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (24 samples, 0.11%)</title><rect x="62.2950%" y="101" width="0.1052%" height="15" fill="rgb(235,182,43)" fg:x="14207" fg:w="24"/><text x="62.5450%" y="111.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (24 samples, 0.11%)</title><rect x="62.2950%" y="85" width="0.1052%" height="15" fill="rgb(242,16,51)" fg:x="14207" fg:w="24"/><text x="62.5450%" y="95.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (24 samples, 0.11%)</title><rect x="62.2950%" y="69" width="0.1052%" height="15" fill="rgb(248,9,4)" fg:x="14207" fg:w="24"/><text x="62.5450%" y="79.50"></text></g><g><title>core::mem::replace (24 samples, 0.11%)</title><rect x="62.2950%" y="53" width="0.1052%" height="15" fill="rgb(210,31,22)" fg:x="14207" fg:w="24"/><text x="62.5450%" y="63.50"></text></g><g><title>core::ptr::write (24 samples, 0.11%)</title><rect x="62.2950%" y="37" width="0.1052%" height="15" fill="rgb(239,54,39)" fg:x="14207" fg:w="24"/><text x="62.5450%" y="47.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (18 samples, 0.08%)</title><rect x="62.4002%" y="165" width="0.0789%" height="15" fill="rgb(230,99,41)" fg:x="14231" fg:w="18"/><text x="62.6502%" y="175.50"></text></g><g><title>core::fmt::Formatter::new (20 samples, 0.09%)</title><rect x="62.4792%" y="165" width="0.0877%" height="15" fill="rgb(253,106,12)" fg:x="14249" fg:w="20"/><text x="62.7292%" y="175.50"></text></g><g><title>core::fmt::Formatter::pad (44 samples, 0.19%)</title><rect x="62.5669%" y="165" width="0.1929%" height="15" fill="rgb(213,46,41)" fg:x="14269" fg:w="44"/><text x="62.8169%" y="175.50"></text></g><g><title>core::iter::adapters::zip::zip (9 samples, 0.04%)</title><rect x="62.7598%" y="165" width="0.0395%" height="15" fill="rgb(215,133,35)" fg:x="14313" fg:w="9"/><text x="63.0098%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (9 samples, 0.04%)</title><rect x="62.7598%" y="149" width="0.0395%" height="15" fill="rgb(213,28,5)" fg:x="14313" fg:w="9"/><text x="63.0098%" y="159.50"></text></g><g><title>core::cmp::min (9 samples, 0.04%)</title><rect x="62.7598%" y="133" width="0.0395%" height="15" fill="rgb(215,77,49)" fg:x="14313" fg:w="9"/><text x="63.0098%" y="143.50"></text></g><g><title>core::cmp::Ord::min (9 samples, 0.04%)</title><rect x="62.7598%" y="117" width="0.0395%" height="15" fill="rgb(248,100,22)" fg:x="14313" fg:w="9"/><text x="63.0098%" y="127.50"></text></g><g><title>core::fmt::write (9 samples, 0.04%)</title><rect x="62.7598%" y="101" width="0.0395%" height="15" fill="rgb(208,67,9)" fg:x="14313" fg:w="9"/><text x="63.0098%" y="111.50"></text></g><g><title>core::fmt::Formatter::write_fmt (763 samples, 3.35%)</title><rect x="59.4712%" y="197" width="3.3456%" height="15" fill="rgb(219,133,21)" fg:x="13563" fg:w="763"/><text x="59.7212%" y="207.50">cor..</text></g><g><title>core::fmt::write (586 samples, 2.57%)</title><rect x="60.2473%" y="181" width="2.5695%" height="15" fill="rgb(246,46,29)" fg:x="13740" fg:w="586"/><text x="60.4973%" y="191.50">co..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (4 samples, 0.02%)</title><rect x="62.7993%" y="165" width="0.0175%" height="15" fill="rgb(246,185,52)" fg:x="14322" fg:w="4"/><text x="63.0493%" y="175.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (4 samples, 0.02%)</title><rect x="62.7993%" y="149" width="0.0175%" height="15" fill="rgb(252,136,11)" fg:x="14322" fg:w="4"/><text x="63.0493%" y="159.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (14 samples, 0.06%)</title><rect x="62.8168%" y="197" width="0.0614%" height="15" fill="rgb(219,138,53)" fg:x="14326" fg:w="14"/><text x="63.0668%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (5 samples, 0.02%)</title><rect x="62.8782%" y="197" width="0.0219%" height="15" fill="rgb(211,51,23)" fg:x="14340" fg:w="5"/><text x="63.1282%" y="207.50"></text></g><g><title>&lt;rlox::expr::Literal as core::fmt::Display&gt;::fmt (951 samples, 4.17%)</title><rect x="58.7959%" y="213" width="4.1700%" height="15" fill="rgb(247,221,28)" fg:x="13409" fg:w="951"/><text x="59.0459%" y="223.50">&lt;rlox..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (15 samples, 0.07%)</title><rect x="62.9001%" y="197" width="0.0658%" height="15" fill="rgb(251,222,45)" fg:x="14345" fg:w="15"/><text x="63.1501%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (15 samples, 0.07%)</title><rect x="62.9001%" y="181" width="0.0658%" height="15" fill="rgb(217,162,53)" fg:x="14345" fg:w="15"/><text x="63.1501%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (15 samples, 0.07%)</title><rect x="62.9001%" y="165" width="0.0658%" height="15" fill="rgb(229,93,14)" fg:x="14345" fg:w="15"/><text x="63.1501%" y="175.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.07%)</title><rect x="62.9001%" y="149" width="0.0658%" height="15" fill="rgb(209,67,49)" fg:x="14345" fg:w="15"/><text x="63.1501%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.02%)</title><rect x="62.9483%" y="133" width="0.0175%" height="15" fill="rgb(213,87,29)" fg:x="14356" fg:w="4"/><text x="63.1983%" y="143.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (45 samples, 0.20%)</title><rect x="63.5666%" y="149" width="0.1973%" height="15" fill="rgb(205,151,52)" fg:x="14497" fg:w="45"/><text x="63.8166%" y="159.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::spare_capacity (24 samples, 0.11%)</title><rect x="63.6587%" y="133" width="0.1052%" height="15" fill="rgb(253,215,39)" fg:x="14518" fg:w="24"/><text x="63.9087%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (23 samples, 0.10%)</title><rect x="63.6631%" y="117" width="0.1009%" height="15" fill="rgb(221,220,41)" fg:x="14519" fg:w="23"/><text x="63.9131%" y="127.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (114 samples, 0.50%)</title><rect x="63.8911%" y="133" width="0.4999%" height="15" fill="rgb(218,133,21)" fg:x="14571" fg:w="114"/><text x="64.1411%" y="143.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (114 samples, 0.50%)</title><rect x="63.8911%" y="117" width="0.4999%" height="15" fill="rgb(221,193,43)" fg:x="14571" fg:w="114"/><text x="64.1411%" y="127.50"></text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::flush_if_completed_line (147 samples, 0.64%)</title><rect x="63.7639%" y="149" width="0.6446%" height="15" fill="rgb(240,128,52)" fg:x="14542" fg:w="147"/><text x="64.0139%" y="159.50"></text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::buffered (4 samples, 0.02%)</title><rect x="64.3909%" y="133" width="0.0175%" height="15" fill="rgb(253,114,12)" fg:x="14685" fg:w="4"/><text x="64.6409%" y="143.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::buffer (4 samples, 0.02%)</title><rect x="64.3909%" y="117" width="0.0175%" height="15" fill="rgb(215,223,47)" fg:x="14685" fg:w="4"/><text x="64.6409%" y="127.50"></text></g><g><title>__memrchr_avx2 (501 samples, 2.20%)</title><rect x="64.8294%" y="101" width="2.1968%" height="15" fill="rgb(248,225,23)" fg:x="14785" fg:w="501"/><text x="65.0794%" y="111.50">_..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (794 samples, 3.48%)</title><rect x="63.5666%" y="165" width="3.4815%" height="15" fill="rgb(250,108,0)" fg:x="14497" fg:w="794"/><text x="63.8166%" y="175.50">&lt;st..</text></g><g><title>std::sys_common::memchr::memrchr (602 samples, 2.64%)</title><rect x="64.4085%" y="149" width="2.6397%" height="15" fill="rgb(228,208,7)" fg:x="14689" fg:w="602"/><text x="64.6585%" y="159.50">st..</text></g><g><title>std::sys::unix::memchr::memrchr (602 samples, 2.64%)</title><rect x="64.4085%" y="133" width="2.6397%" height="15" fill="rgb(244,45,10)" fg:x="14689" fg:w="602"/><text x="64.6585%" y="143.50">st..</text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (602 samples, 2.64%)</title><rect x="64.4085%" y="117" width="2.6397%" height="15" fill="rgb(207,125,25)" fg:x="14689" fg:w="602"/><text x="64.6585%" y="127.50">st..</text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (5 samples, 0.02%)</title><rect x="67.0262%" y="101" width="0.0219%" height="15" fill="rgb(210,195,18)" fg:x="15286" fg:w="5"/><text x="67.2762%" y="111.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (1,236 samples, 5.42%)</title><rect x="63.5666%" y="181" width="5.4196%" height="15" fill="rgb(249,80,12)" fg:x="14497" fg:w="1236"/><text x="63.8166%" y="191.50">&lt;std::i..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (442 samples, 1.94%)</title><rect x="67.0481%" y="165" width="1.9381%" height="15" fill="rgb(221,65,9)" fg:x="15291" fg:w="442"/><text x="67.2981%" y="175.50">&lt;..</text></g><g><title>__memmove_avx_unaligned_erms (299 samples, 1.31%)</title><rect x="67.6752%" y="149" width="1.3111%" height="15" fill="rgb(235,49,36)" fg:x="15434" fg:w="299"/><text x="67.9252%" y="159.50"></text></g><g><title>core::cell::BorrowRefMut::new (101 samples, 0.44%)</title><rect x="68.9862%" y="149" width="0.4429%" height="15" fill="rgb(225,32,20)" fg:x="15733" fg:w="101"/><text x="69.2362%" y="159.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (55 samples, 0.24%)</title><rect x="69.1879%" y="133" width="0.2412%" height="15" fill="rgb(215,141,46)" fg:x="15779" fg:w="55"/><text x="69.4379%" y="143.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (55 samples, 0.24%)</title><rect x="69.1879%" y="117" width="0.2412%" height="15" fill="rgb(250,160,47)" fg:x="15779" fg:w="55"/><text x="69.4379%" y="127.50"></text></g><g><title>core::mem::replace (55 samples, 0.24%)</title><rect x="69.1879%" y="101" width="0.2412%" height="15" fill="rgb(216,222,40)" fg:x="15779" fg:w="55"/><text x="69.4379%" y="111.50"></text></g><g><title>core::ptr::write (55 samples, 0.24%)</title><rect x="69.1879%" y="85" width="0.2412%" height="15" fill="rgb(234,217,39)" fg:x="15779" fg:w="55"/><text x="69.4379%" y="95.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (118 samples, 0.52%)</title><rect x="68.9862%" y="181" width="0.5174%" height="15" fill="rgb(207,178,40)" fg:x="15733" fg:w="118"/><text x="69.2362%" y="191.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (118 samples, 0.52%)</title><rect x="68.9862%" y="165" width="0.5174%" height="15" fill="rgb(221,136,13)" fg:x="15733" fg:w="118"/><text x="69.2362%" y="175.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (17 samples, 0.07%)</title><rect x="69.4291%" y="149" width="0.0745%" height="15" fill="rgb(249,199,10)" fg:x="15834" fg:w="17"/><text x="69.6791%" y="159.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1,599 samples, 7.01%)</title><rect x="62.9659%" y="213" width="7.0113%" height="15" fill="rgb(249,222,13)" fg:x="14360" fg:w="1599"/><text x="63.2159%" y="223.50">&lt;std::io:..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1,508 samples, 6.61%)</title><rect x="63.3649%" y="197" width="6.6123%" height="15" fill="rgb(244,185,38)" fg:x="14451" fg:w="1508"/><text x="63.6149%" y="207.50">&lt;std::io:..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt; (108 samples, 0.47%)</title><rect x="69.5036%" y="181" width="0.4736%" height="15" fill="rgb(236,202,9)" fg:x="15851" fg:w="108"/><text x="69.7536%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (108 samples, 0.47%)</title><rect x="69.5036%" y="165" width="0.4736%" height="15" fill="rgb(250,229,37)" fg:x="15851" fg:w="108"/><text x="69.7536%" y="175.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (108 samples, 0.47%)</title><rect x="69.5036%" y="149" width="0.4736%" height="15" fill="rgb(206,174,23)" fg:x="15851" fg:w="108"/><text x="69.7536%" y="159.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (108 samples, 0.47%)</title><rect x="69.5036%" y="133" width="0.4736%" height="15" fill="rgb(211,33,43)" fg:x="15851" fg:w="108"/><text x="69.7536%" y="143.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (108 samples, 0.47%)</title><rect x="69.5036%" y="117" width="0.4736%" height="15" fill="rgb(245,58,50)" fg:x="15851" fg:w="108"/><text x="69.7536%" y="127.50"></text></g><g><title>core::mem::replace (108 samples, 0.47%)</title><rect x="69.5036%" y="101" width="0.4736%" height="15" fill="rgb(244,68,36)" fg:x="15851" fg:w="108"/><text x="69.7536%" y="111.50"></text></g><g><title>core::ptr::write (108 samples, 0.47%)</title><rect x="69.5036%" y="85" width="0.4736%" height="15" fill="rgb(232,229,15)" fg:x="15851" fg:w="108"/><text x="69.7536%" y="95.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (17 samples, 0.07%)</title><rect x="69.9772%" y="213" width="0.0745%" height="15" fill="rgb(254,30,23)" fg:x="15959" fg:w="17"/><text x="70.2272%" y="223.50"></text></g><g><title>core::fmt::Formatter::new (27 samples, 0.12%)</title><rect x="70.0517%" y="213" width="0.1184%" height="15" fill="rgb(235,160,14)" fg:x="15976" fg:w="27"/><text x="70.3017%" y="223.50"></text></g><g><title>core::fmt::Formatter::pad (39 samples, 0.17%)</title><rect x="70.1701%" y="213" width="0.1710%" height="15" fill="rgb(212,155,44)" fg:x="16003" fg:w="39"/><text x="70.4201%" y="223.50"></text></g><g><title>core::iter::adapters::zip::zip (19 samples, 0.08%)</title><rect x="70.3411%" y="213" width="0.0833%" height="15" fill="rgb(226,2,50)" fg:x="16042" fg:w="19"/><text x="70.5911%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (19 samples, 0.08%)</title><rect x="70.3411%" y="197" width="0.0833%" height="15" fill="rgb(234,177,6)" fg:x="16042" fg:w="19"/><text x="70.5911%" y="207.50"></text></g><g><title>core::cmp::min (19 samples, 0.08%)</title><rect x="70.3411%" y="181" width="0.0833%" height="15" fill="rgb(217,24,9)" fg:x="16042" fg:w="19"/><text x="70.5911%" y="191.50"></text></g><g><title>core::cmp::Ord::min (19 samples, 0.08%)</title><rect x="70.3411%" y="165" width="0.0833%" height="15" fill="rgb(220,13,46)" fg:x="16042" fg:w="19"/><text x="70.5911%" y="175.50"></text></g><g><title>core::fmt::write (17 samples, 0.07%)</title><rect x="70.3499%" y="149" width="0.0745%" height="15" fill="rgb(239,221,27)" fg:x="16044" fg:w="17"/><text x="70.5999%" y="159.50"></text></g><g><title>&lt;rlox::expr::Unary&lt;R&gt; as core::fmt::Display&gt;::fmt (3,324 samples, 14.58%)</title><rect x="55.9107%" y="261" width="14.5751%" height="15" fill="rgb(222,198,25)" fg:x="12751" fg:w="3324"/><text x="56.1607%" y="271.50">&lt;rlox::expr::Unary&lt;R&gt; ..</text></g><g><title>core::fmt::Formatter::write_fmt (3,206 samples, 14.06%)</title><rect x="56.4281%" y="245" width="14.0577%" height="15" fill="rgb(211,99,13)" fg:x="12869" fg:w="3206"/><text x="56.6781%" y="255.50">core::fmt::Formatter:..</text></g><g><title>core::fmt::write (2,946 samples, 12.92%)</title><rect x="57.5682%" y="229" width="12.9177%" height="15" fill="rgb(232,111,31)" fg:x="13129" fg:w="2946"/><text x="57.8182%" y="239.50">core::fmt::write</text></g><g><title>core::str::&lt;impl str&gt;::is_empty (14 samples, 0.06%)</title><rect x="70.4244%" y="213" width="0.0614%" height="15" fill="rgb(245,82,37)" fg:x="16061" fg:w="14"/><text x="70.6744%" y="223.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (20 samples, 0.09%)</title><rect x="70.7796%" y="197" width="0.0877%" height="15" fill="rgb(227,149,46)" fg:x="16142" fg:w="20"/><text x="71.0296%" y="207.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::spare_capacity (13 samples, 0.06%)</title><rect x="70.8103%" y="181" width="0.0570%" height="15" fill="rgb(218,36,50)" fg:x="16149" fg:w="13"/><text x="71.0603%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (11 samples, 0.05%)</title><rect x="70.8191%" y="165" width="0.0482%" height="15" fill="rgb(226,80,48)" fg:x="16151" fg:w="11"/><text x="71.0691%" y="175.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (42 samples, 0.18%)</title><rect x="70.9112%" y="181" width="0.1842%" height="15" fill="rgb(238,224,15)" fg:x="16172" fg:w="42"/><text x="71.1612%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (42 samples, 0.18%)</title><rect x="70.9112%" y="165" width="0.1842%" height="15" fill="rgb(241,136,10)" fg:x="16172" fg:w="42"/><text x="71.1612%" y="175.50"></text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::flush_if_completed_line (53 samples, 0.23%)</title><rect x="70.8673%" y="197" width="0.2324%" height="15" fill="rgb(208,32,45)" fg:x="16162" fg:w="53"/><text x="71.1173%" y="207.50"></text></g><g><title>__memrchr_avx2 (232 samples, 1.02%)</title><rect x="71.2619%" y="149" width="1.0173%" height="15" fill="rgb(207,135,9)" fg:x="16252" fg:w="232"/><text x="71.5119%" y="159.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (344 samples, 1.51%)</title><rect x="70.7796%" y="213" width="1.5084%" height="15" fill="rgb(206,86,44)" fg:x="16142" fg:w="344"/><text x="71.0296%" y="223.50"></text></g><g><title>std::sys_common::memchr::memrchr (271 samples, 1.19%)</title><rect x="71.0997%" y="197" width="1.1883%" height="15" fill="rgb(245,177,15)" fg:x="16215" fg:w="271"/><text x="71.3497%" y="207.50"></text></g><g><title>std::sys::unix::memchr::memrchr (271 samples, 1.19%)</title><rect x="71.0997%" y="181" width="1.1883%" height="15" fill="rgb(206,64,50)" fg:x="16215" fg:w="271"/><text x="71.3497%" y="191.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (271 samples, 1.19%)</title><rect x="71.0997%" y="165" width="1.1883%" height="15" fill="rgb(234,36,40)" fg:x="16215" fg:w="271"/><text x="71.3497%" y="175.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (621 samples, 2.72%)</title><rect x="70.7796%" y="229" width="2.7230%" height="15" fill="rgb(213,64,8)" fg:x="16142" fg:w="621"/><text x="71.0296%" y="239.50">&lt;s..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (277 samples, 1.21%)</title><rect x="72.2880%" y="213" width="1.2146%" height="15" fill="rgb(210,75,36)" fg:x="16486" fg:w="277"/><text x="72.5380%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (179 samples, 0.78%)</title><rect x="72.7177%" y="197" width="0.7849%" height="15" fill="rgb(229,88,21)" fg:x="16584" fg:w="179"/><text x="72.9677%" y="207.50"></text></g><g><title>core::cell::BorrowRefMut::new (71 samples, 0.31%)</title><rect x="73.5026%" y="197" width="0.3113%" height="15" fill="rgb(252,204,47)" fg:x="16763" fg:w="71"/><text x="73.7526%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (28 samples, 0.12%)</title><rect x="73.6911%" y="181" width="0.1228%" height="15" fill="rgb(208,77,27)" fg:x="16806" fg:w="28"/><text x="73.9411%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (28 samples, 0.12%)</title><rect x="73.6911%" y="165" width="0.1228%" height="15" fill="rgb(221,76,26)" fg:x="16806" fg:w="28"/><text x="73.9411%" y="175.50"></text></g><g><title>core::mem::replace (28 samples, 0.12%)</title><rect x="73.6911%" y="149" width="0.1228%" height="15" fill="rgb(225,139,18)" fg:x="16806" fg:w="28"/><text x="73.9411%" y="159.50"></text></g><g><title>core::ptr::write (28 samples, 0.12%)</title><rect x="73.6911%" y="133" width="0.1228%" height="15" fill="rgb(230,137,11)" fg:x="16806" fg:w="28"/><text x="73.9411%" y="143.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (82 samples, 0.36%)</title><rect x="73.5026%" y="229" width="0.3596%" height="15" fill="rgb(212,28,1)" fg:x="16763" fg:w="82"/><text x="73.7526%" y="239.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (82 samples, 0.36%)</title><rect x="73.5026%" y="213" width="0.3596%" height="15" fill="rgb(248,164,17)" fg:x="16763" fg:w="82"/><text x="73.7526%" y="223.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (11 samples, 0.05%)</title><rect x="73.8139%" y="197" width="0.0482%" height="15" fill="rgb(222,171,42)" fg:x="16834" fg:w="11"/><text x="74.0639%" y="207.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (814 samples, 3.57%)</title><rect x="70.4858%" y="261" width="3.5692%" height="15" fill="rgb(243,84,45)" fg:x="16075" fg:w="814"/><text x="70.7358%" y="271.50">&lt;std..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (777 samples, 3.41%)</title><rect x="70.6481%" y="245" width="3.4070%" height="15" fill="rgb(252,49,23)" fg:x="16112" fg:w="777"/><text x="70.8981%" y="255.50">&lt;st..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt; (44 samples, 0.19%)</title><rect x="73.8621%" y="229" width="0.1929%" height="15" fill="rgb(215,19,7)" fg:x="16845" fg:w="44"/><text x="74.1121%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (44 samples, 0.19%)</title><rect x="73.8621%" y="213" width="0.1929%" height="15" fill="rgb(238,81,41)" fg:x="16845" fg:w="44"/><text x="74.1121%" y="223.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (44 samples, 0.19%)</title><rect x="73.8621%" y="197" width="0.1929%" height="15" fill="rgb(210,199,37)" fg:x="16845" fg:w="44"/><text x="74.1121%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (44 samples, 0.19%)</title><rect x="73.8621%" y="181" width="0.1929%" height="15" fill="rgb(244,192,49)" fg:x="16845" fg:w="44"/><text x="74.1121%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (44 samples, 0.19%)</title><rect x="73.8621%" y="165" width="0.1929%" height="15" fill="rgb(226,211,11)" fg:x="16845" fg:w="44"/><text x="74.1121%" y="175.50"></text></g><g><title>core::mem::replace (44 samples, 0.19%)</title><rect x="73.8621%" y="149" width="0.1929%" height="15" fill="rgb(236,162,54)" fg:x="16845" fg:w="44"/><text x="74.1121%" y="159.50"></text></g><g><title>core::ptr::write (44 samples, 0.19%)</title><rect x="73.8621%" y="133" width="0.1929%" height="15" fill="rgb(220,229,9)" fg:x="16845" fg:w="44"/><text x="74.1121%" y="143.50"></text></g><g><title>core::fmt::Formatter::new (28 samples, 0.12%)</title><rect x="74.0551%" y="261" width="0.1228%" height="15" fill="rgb(250,87,22)" fg:x="16889" fg:w="28"/><text x="74.3051%" y="271.50"></text></g><g><title>core::iter::adapters::zip::zip (12 samples, 0.05%)</title><rect x="74.1778%" y="261" width="0.0526%" height="15" fill="rgb(239,43,17)" fg:x="16917" fg:w="12"/><text x="74.4278%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (12 samples, 0.05%)</title><rect x="74.1778%" y="245" width="0.0526%" height="15" fill="rgb(231,177,25)" fg:x="16917" fg:w="12"/><text x="74.4278%" y="255.50"></text></g><g><title>core::cmp::min (12 samples, 0.05%)</title><rect x="74.1778%" y="229" width="0.0526%" height="15" fill="rgb(219,179,1)" fg:x="16917" fg:w="12"/><text x="74.4278%" y="239.50"></text></g><g><title>core::cmp::Ord::min (12 samples, 0.05%)</title><rect x="74.1778%" y="213" width="0.0526%" height="15" fill="rgb(238,219,53)" fg:x="16917" fg:w="12"/><text x="74.4278%" y="223.50"></text></g><g><title>core::fmt::write (12 samples, 0.05%)</title><rect x="74.1778%" y="197" width="0.0526%" height="15" fill="rgb(232,167,36)" fg:x="16917" fg:w="12"/><text x="74.4278%" y="207.50"></text></g><g><title>&lt;rlox::expr::Grouping&lt;E&gt; as core::fmt::Display&gt;::fmt (4,718 samples, 20.69%)</title><rect x="53.5692%" y="309" width="20.6875%" height="15" fill="rgb(244,19,51)" fg:x="12217" fg:w="4718"/><text x="53.8192%" y="319.50">&lt;rlox::expr::Grouping&lt;E&gt; as core:..</text></g><g><title>core::fmt::Formatter::write_fmt (4,555 samples, 19.97%)</title><rect x="54.2840%" y="293" width="19.9728%" height="15" fill="rgb(224,6,22)" fg:x="12380" fg:w="4555"/><text x="54.5340%" y="303.50">core::fmt::Formatter::write_fmt</text></g><g><title>core::fmt::write (4,316 samples, 18.92%)</title><rect x="55.3319%" y="277" width="18.9248%" height="15" fill="rgb(224,145,5)" fg:x="12619" fg:w="4316"/><text x="55.5819%" y="287.50">core::fmt::write</text></g><g><title>core::str::&lt;impl str&gt;::is_empty (6 samples, 0.03%)</title><rect x="74.2305%" y="261" width="0.0263%" height="15" fill="rgb(234,130,49)" fg:x="16929" fg:w="6"/><text x="74.4805%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (6 samples, 0.03%)</title><rect x="74.4541%" y="165" width="0.0263%" height="15" fill="rgb(254,6,2)" fg:x="16980" fg:w="6"/><text x="74.7041%" y="175.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (11 samples, 0.05%)</title><rect x="74.4541%" y="293" width="0.0482%" height="15" fill="rgb(208,96,46)" fg:x="16980" fg:w="11"/><text x="74.7041%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (11 samples, 0.05%)</title><rect x="74.4541%" y="277" width="0.0482%" height="15" fill="rgb(239,3,39)" fg:x="16980" fg:w="11"/><text x="74.7041%" y="287.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (11 samples, 0.05%)</title><rect x="74.4541%" y="261" width="0.0482%" height="15" fill="rgb(233,210,1)" fg:x="16980" fg:w="11"/><text x="74.7041%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (11 samples, 0.05%)</title><rect x="74.4541%" y="245" width="0.0482%" height="15" fill="rgb(244,137,37)" fg:x="16980" fg:w="11"/><text x="74.7041%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (11 samples, 0.05%)</title><rect x="74.4541%" y="229" width="0.0482%" height="15" fill="rgb(240,136,2)" fg:x="16980" fg:w="11"/><text x="74.7041%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (11 samples, 0.05%)</title><rect x="74.4541%" y="213" width="0.0482%" height="15" fill="rgb(239,18,37)" fg:x="16980" fg:w="11"/><text x="74.7041%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (11 samples, 0.05%)</title><rect x="74.4541%" y="197" width="0.0482%" height="15" fill="rgb(218,185,22)" fg:x="16980" fg:w="11"/><text x="74.7041%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (11 samples, 0.05%)</title><rect x="74.4541%" y="181" width="0.0482%" height="15" fill="rgb(225,218,4)" fg:x="16980" fg:w="11"/><text x="74.7041%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.02%)</title><rect x="74.4804%" y="165" width="0.0219%" height="15" fill="rgb(230,182,32)" fg:x="16986" fg:w="5"/><text x="74.7304%" y="175.50"></text></g><g><title>core::fmt::Arguments::new_v1 (42 samples, 0.18%)</title><rect x="74.5023%" y="293" width="0.1842%" height="15" fill="rgb(242,56,43)" fg:x="16991" fg:w="42"/><text x="74.7523%" y="303.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (73 samples, 0.32%)</title><rect x="75.9844%" y="261" width="0.3201%" height="15" fill="rgb(233,99,24)" fg:x="17329" fg:w="73"/><text x="76.2344%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (48 samples, 0.21%)</title><rect x="76.0940%" y="245" width="0.2105%" height="15" fill="rgb(234,209,42)" fg:x="17354" fg:w="48"/><text x="76.3440%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (48 samples, 0.21%)</title><rect x="76.0940%" y="229" width="0.2105%" height="15" fill="rgb(227,7,12)" fg:x="17354" fg:w="48"/><text x="76.3440%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (48 samples, 0.21%)</title><rect x="76.0940%" y="213" width="0.2105%" height="15" fill="rgb(245,203,43)" fg:x="17354" fg:w="48"/><text x="76.3440%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (41 samples, 0.18%)</title><rect x="76.1247%" y="197" width="0.1798%" height="15" fill="rgb(238,205,33)" fg:x="17361" fg:w="41"/><text x="76.3747%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.04%)</title><rect x="76.3045%" y="261" width="0.0351%" height="15" fill="rgb(231,56,7)" fg:x="17402" fg:w="8"/><text x="76.5545%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (8 samples, 0.04%)</title><rect x="76.3045%" y="245" width="0.0351%" height="15" fill="rgb(244,186,29)" fg:x="17402" fg:w="8"/><text x="76.5545%" y="255.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (12 samples, 0.05%)</title><rect x="76.5062%" y="197" width="0.0526%" height="15" fill="rgb(234,111,31)" fg:x="17448" fg:w="12"/><text x="76.7562%" y="207.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::spare_capacity (4 samples, 0.02%)</title><rect x="76.5413%" y="181" width="0.0175%" height="15" fill="rgb(241,149,10)" fg:x="17456" fg:w="4"/><text x="76.7913%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (4 samples, 0.02%)</title><rect x="76.5413%" y="165" width="0.0175%" height="15" fill="rgb(249,206,44)" fg:x="17456" fg:w="4"/><text x="76.7913%" y="175.50"></text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::flush_if_completed_line (35 samples, 0.15%)</title><rect x="76.5588%" y="197" width="0.1535%" height="15" fill="rgb(251,153,30)" fg:x="17460" fg:w="35"/><text x="76.8088%" y="207.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (27 samples, 0.12%)</title><rect x="76.5939%" y="181" width="0.1184%" height="15" fill="rgb(239,152,38)" fg:x="17468" fg:w="27"/><text x="76.8439%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (27 samples, 0.12%)</title><rect x="76.5939%" y="165" width="0.1184%" height="15" fill="rgb(249,139,47)" fg:x="17468" fg:w="27"/><text x="76.8439%" y="175.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (133 samples, 0.58%)</title><rect x="76.5062%" y="213" width="0.5832%" height="15" fill="rgb(244,64,35)" fg:x="17448" fg:w="133"/><text x="76.7562%" y="223.50"></text></g><g><title>std::sys_common::memchr::memrchr (86 samples, 0.38%)</title><rect x="76.7123%" y="197" width="0.3771%" height="15" fill="rgb(216,46,15)" fg:x="17495" fg:w="86"/><text x="76.9623%" y="207.50"></text></g><g><title>std::sys::unix::memchr::memrchr (86 samples, 0.38%)</title><rect x="76.7123%" y="181" width="0.3771%" height="15" fill="rgb(250,74,19)" fg:x="17495" fg:w="86"/><text x="76.9623%" y="191.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (86 samples, 0.38%)</title><rect x="76.7123%" y="165" width="0.3771%" height="15" fill="rgb(249,42,33)" fg:x="17495" fg:w="86"/><text x="76.9623%" y="175.50"></text></g><g><title>__memrchr_avx2 (63 samples, 0.28%)</title><rect x="76.8131%" y="149" width="0.2762%" height="15" fill="rgb(242,149,17)" fg:x="17518" fg:w="63"/><text x="77.0631%" y="159.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (273 samples, 1.20%)</title><rect x="76.5062%" y="229" width="1.1971%" height="15" fill="rgb(244,29,21)" fg:x="17448" fg:w="273"/><text x="76.7562%" y="239.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (140 samples, 0.61%)</title><rect x="77.0894%" y="213" width="0.6139%" height="15" fill="rgb(220,130,37)" fg:x="17581" fg:w="140"/><text x="77.3394%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (97 samples, 0.43%)</title><rect x="77.2779%" y="197" width="0.4253%" height="15" fill="rgb(211,67,2)" fg:x="17624" fg:w="97"/><text x="77.5279%" y="207.50"></text></g><g><title>core::cell::BorrowRefMut::new (29 samples, 0.13%)</title><rect x="77.7032%" y="197" width="0.1272%" height="15" fill="rgb(235,68,52)" fg:x="17721" fg:w="29"/><text x="77.9532%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (13 samples, 0.06%)</title><rect x="77.7734%" y="181" width="0.0570%" height="15" fill="rgb(246,142,3)" fg:x="17737" fg:w="13"/><text x="78.0234%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (13 samples, 0.06%)</title><rect x="77.7734%" y="165" width="0.0570%" height="15" fill="rgb(241,25,7)" fg:x="17737" fg:w="13"/><text x="78.0234%" y="175.50"></text></g><g><title>core::mem::replace (13 samples, 0.06%)</title><rect x="77.7734%" y="149" width="0.0570%" height="15" fill="rgb(242,119,39)" fg:x="17737" fg:w="13"/><text x="78.0234%" y="159.50"></text></g><g><title>core::ptr::write (13 samples, 0.06%)</title><rect x="77.7734%" y="133" width="0.0570%" height="15" fill="rgb(241,98,45)" fg:x="17737" fg:w="13"/><text x="78.0234%" y="143.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (37 samples, 0.16%)</title><rect x="77.7032%" y="229" width="0.1622%" height="15" fill="rgb(254,28,30)" fg:x="17721" fg:w="37"/><text x="77.9532%" y="239.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (37 samples, 0.16%)</title><rect x="77.7032%" y="213" width="0.1622%" height="15" fill="rgb(241,142,54)" fg:x="17721" fg:w="37"/><text x="77.9532%" y="223.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (8 samples, 0.04%)</title><rect x="77.8304%" y="197" width="0.0351%" height="15" fill="rgb(222,85,15)" fg:x="17750" fg:w="8"/><text x="78.0804%" y="207.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (363 samples, 1.59%)</title><rect x="76.3396%" y="261" width="1.5917%" height="15" fill="rgb(210,85,47)" fg:x="17410" fg:w="363"/><text x="76.5896%" y="271.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (344 samples, 1.51%)</title><rect x="76.4229%" y="245" width="1.5084%" height="15" fill="rgb(224,206,25)" fg:x="17429" fg:w="344"/><text x="76.6729%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt; (15 samples, 0.07%)</title><rect x="77.8655%" y="229" width="0.0658%" height="15" fill="rgb(243,201,19)" fg:x="17758" fg:w="15"/><text x="78.1155%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (15 samples, 0.07%)</title><rect x="77.8655%" y="213" width="0.0658%" height="15" fill="rgb(236,59,4)" fg:x="17758" fg:w="15"/><text x="78.1155%" y="223.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (15 samples, 0.07%)</title><rect x="77.8655%" y="197" width="0.0658%" height="15" fill="rgb(254,179,45)" fg:x="17758" fg:w="15"/><text x="78.1155%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (15 samples, 0.07%)</title><rect x="77.8655%" y="181" width="0.0658%" height="15" fill="rgb(226,14,10)" fg:x="17758" fg:w="15"/><text x="78.1155%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (15 samples, 0.07%)</title><rect x="77.8655%" y="165" width="0.0658%" height="15" fill="rgb(244,27,41)" fg:x="17758" fg:w="15"/><text x="78.1155%" y="175.50"></text></g><g><title>core::mem::replace (15 samples, 0.07%)</title><rect x="77.8655%" y="149" width="0.0658%" height="15" fill="rgb(235,35,32)" fg:x="17758" fg:w="15"/><text x="78.1155%" y="159.50"></text></g><g><title>core::ptr::write (15 samples, 0.07%)</title><rect x="77.8655%" y="133" width="0.0658%" height="15" fill="rgb(218,68,31)" fg:x="17758" fg:w="15"/><text x="78.1155%" y="143.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (20 samples, 0.09%)</title><rect x="77.9312%" y="261" width="0.0877%" height="15" fill="rgb(207,120,37)" fg:x="17773" fg:w="20"/><text x="78.1812%" y="271.50"></text></g><g><title>core::fmt::Formatter::new (35 samples, 0.15%)</title><rect x="78.0189%" y="261" width="0.1535%" height="15" fill="rgb(227,98,0)" fg:x="17793" fg:w="35"/><text x="78.2689%" y="271.50"></text></g><g><title>core::fmt::Formatter::pad (54 samples, 0.24%)</title><rect x="78.1724%" y="261" width="0.2368%" height="15" fill="rgb(207,7,3)" fg:x="17828" fg:w="54"/><text x="78.4224%" y="271.50"></text></g><g><title>core::iter::adapters::zip::zip (13 samples, 0.06%)</title><rect x="78.4092%" y="261" width="0.0570%" height="15" fill="rgb(206,98,19)" fg:x="17882" fg:w="13"/><text x="78.6592%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (13 samples, 0.06%)</title><rect x="78.4092%" y="245" width="0.0570%" height="15" fill="rgb(217,5,26)" fg:x="17882" fg:w="13"/><text x="78.6592%" y="255.50"></text></g><g><title>core::cmp::min (13 samples, 0.06%)</title><rect x="78.4092%" y="229" width="0.0570%" height="15" fill="rgb(235,190,38)" fg:x="17882" fg:w="13"/><text x="78.6592%" y="239.50"></text></g><g><title>core::cmp::Ord::min (13 samples, 0.06%)</title><rect x="78.4092%" y="213" width="0.0570%" height="15" fill="rgb(247,86,24)" fg:x="17882" fg:w="13"/><text x="78.6592%" y="223.50"></text></g><g><title>core::fmt::write (13 samples, 0.06%)</title><rect x="78.4092%" y="197" width="0.0570%" height="15" fill="rgb(205,101,16)" fg:x="17882" fg:w="13"/><text x="78.6592%" y="207.50"></text></g><g><title>core::fmt::Formatter::write_fmt (868 samples, 3.81%)</title><rect x="74.6865%" y="293" width="3.8060%" height="15" fill="rgb(246,168,33)" fg:x="17033" fg:w="868"/><text x="74.9365%" y="303.50">core..</text></g><g><title>core::fmt::write (633 samples, 2.78%)</title><rect x="75.7169%" y="277" width="2.7756%" height="15" fill="rgb(231,114,1)" fg:x="17268" fg:w="633"/><text x="75.9669%" y="287.50">co..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (6 samples, 0.03%)</title><rect x="78.4662%" y="261" width="0.0263%" height="15" fill="rgb(207,184,53)" fg:x="17895" fg:w="6"/><text x="78.7162%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (6 samples, 0.03%)</title><rect x="78.4662%" y="245" width="0.0263%" height="15" fill="rgb(224,95,51)" fg:x="17895" fg:w="6"/><text x="78.7162%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (17 samples, 0.07%)</title><rect x="78.4925%" y="293" width="0.0745%" height="15" fill="rgb(212,188,45)" fg:x="17901" fg:w="17"/><text x="78.7425%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (4 samples, 0.02%)</title><rect x="78.5670%" y="293" width="0.0175%" height="15" fill="rgb(223,154,38)" fg:x="17918" fg:w="4"/><text x="78.8170%" y="303.50"></text></g><g><title>&lt;rlox::expr::Literal as core::fmt::Display&gt;::fmt (1,008 samples, 4.42%)</title><rect x="74.2568%" y="309" width="4.4199%" height="15" fill="rgb(251,22,52)" fg:x="16935" fg:w="1008"/><text x="74.5068%" y="319.50">&lt;rlox..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (21 samples, 0.09%)</title><rect x="78.5846%" y="293" width="0.0921%" height="15" fill="rgb(229,209,22)" fg:x="17922" fg:w="21"/><text x="78.8346%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (21 samples, 0.09%)</title><rect x="78.5846%" y="277" width="0.0921%" height="15" fill="rgb(234,138,34)" fg:x="17922" fg:w="21"/><text x="78.8346%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (21 samples, 0.09%)</title><rect x="78.5846%" y="261" width="0.0921%" height="15" fill="rgb(212,95,11)" fg:x="17922" fg:w="21"/><text x="78.8346%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.09%)</title><rect x="78.5846%" y="245" width="0.0921%" height="15" fill="rgb(240,179,47)" fg:x="17922" fg:w="21"/><text x="78.8346%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (9 samples, 0.04%)</title><rect x="78.6372%" y="229" width="0.0395%" height="15" fill="rgb(240,163,11)" fg:x="17934" fg:w="9"/><text x="78.8872%" y="239.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (66 samples, 0.29%)</title><rect x="79.4045%" y="245" width="0.2894%" height="15" fill="rgb(236,37,12)" fg:x="18109" fg:w="66"/><text x="79.6545%" y="255.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::spare_capacity (29 samples, 0.13%)</title><rect x="79.5668%" y="229" width="0.1272%" height="15" fill="rgb(232,164,16)" fg:x="18146" fg:w="29"/><text x="79.8168%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (26 samples, 0.11%)</title><rect x="79.5799%" y="213" width="0.1140%" height="15" fill="rgb(244,205,15)" fg:x="18149" fg:w="26"/><text x="79.8299%" y="223.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (156 samples, 0.68%)</title><rect x="79.8606%" y="229" width="0.6840%" height="15" fill="rgb(223,117,47)" fg:x="18213" fg:w="156"/><text x="80.1106%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (156 samples, 0.68%)</title><rect x="79.8606%" y="213" width="0.6840%" height="15" fill="rgb(244,107,35)" fg:x="18213" fg:w="156"/><text x="80.1106%" y="223.50"></text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::flush_if_completed_line (206 samples, 0.90%)</title><rect x="79.6939%" y="245" width="0.9033%" height="15" fill="rgb(205,140,8)" fg:x="18175" fg:w="206"/><text x="79.9439%" y="255.50"></text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::buffered (12 samples, 0.05%)</title><rect x="80.5446%" y="229" width="0.0526%" height="15" fill="rgb(228,84,46)" fg:x="18369" fg:w="12"/><text x="80.7946%" y="239.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::buffer (12 samples, 0.05%)</title><rect x="80.5446%" y="213" width="0.0526%" height="15" fill="rgb(254,188,9)" fg:x="18369" fg:w="12"/><text x="80.7946%" y="223.50"></text></g><g><title>__memrchr_avx2 (622 samples, 2.73%)</title><rect x="81.0927%" y="197" width="2.7274%" height="15" fill="rgb(206,112,54)" fg:x="18494" fg:w="622"/><text x="81.3427%" y="207.50">__..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (1,010 samples, 4.43%)</title><rect x="79.4045%" y="261" width="4.4287%" height="15" fill="rgb(216,84,49)" fg:x="18109" fg:w="1010"/><text x="79.6545%" y="271.50">&lt;std:..</text></g><g><title>std::sys_common::memchr::memrchr (738 samples, 3.24%)</title><rect x="80.5972%" y="245" width="3.2360%" height="15" fill="rgb(214,194,35)" fg:x="18381" fg:w="738"/><text x="80.8472%" y="255.50">std..</text></g><g><title>std::sys::unix::memchr::memrchr (738 samples, 3.24%)</title><rect x="80.5972%" y="229" width="3.2360%" height="15" fill="rgb(249,28,3)" fg:x="18381" fg:w="738"/><text x="80.8472%" y="239.50">std..</text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (738 samples, 3.24%)</title><rect x="80.5972%" y="213" width="3.2360%" height="15" fill="rgb(222,56,52)" fg:x="18381" fg:w="738"/><text x="80.8472%" y="223.50">std..</text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (3 samples, 0.01%)</title><rect x="83.8200%" y="197" width="0.0132%" height="15" fill="rgb(245,217,50)" fg:x="19116" fg:w="3"/><text x="84.0700%" y="207.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (1,546 samples, 6.78%)</title><rect x="79.4045%" y="277" width="6.7789%" height="15" fill="rgb(213,201,24)" fg:x="18109" fg:w="1546"/><text x="79.6545%" y="287.50">&lt;std::io:..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (536 samples, 2.35%)</title><rect x="83.8332%" y="261" width="2.3503%" height="15" fill="rgb(248,116,28)" fg:x="19119" fg:w="536"/><text x="84.0832%" y="271.50">&lt;..</text></g><g><title>__memmove_avx_unaligned_erms (339 samples, 1.49%)</title><rect x="84.6970%" y="245" width="1.4865%" height="15" fill="rgb(219,72,43)" fg:x="19316" fg:w="339"/><text x="84.9470%" y="255.50"></text></g><g><title>core::cell::BorrowRefMut::new (157 samples, 0.69%)</title><rect x="86.1835%" y="245" width="0.6884%" height="15" fill="rgb(209,138,14)" fg:x="19655" fg:w="157"/><text x="86.4335%" y="255.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (75 samples, 0.33%)</title><rect x="86.5430%" y="229" width="0.3289%" height="15" fill="rgb(222,18,33)" fg:x="19737" fg:w="75"/><text x="86.7930%" y="239.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (75 samples, 0.33%)</title><rect x="86.5430%" y="213" width="0.3289%" height="15" fill="rgb(213,199,7)" fg:x="19737" fg:w="75"/><text x="86.7930%" y="223.50"></text></g><g><title>core::mem::replace (75 samples, 0.33%)</title><rect x="86.5430%" y="197" width="0.3289%" height="15" fill="rgb(250,110,10)" fg:x="19737" fg:w="75"/><text x="86.7930%" y="207.50"></text></g><g><title>core::ptr::write (75 samples, 0.33%)</title><rect x="86.5430%" y="181" width="0.3289%" height="15" fill="rgb(248,123,6)" fg:x="19737" fg:w="75"/><text x="86.7930%" y="191.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (179 samples, 0.78%)</title><rect x="86.1835%" y="277" width="0.7849%" height="15" fill="rgb(206,91,31)" fg:x="19655" fg:w="179"/><text x="86.4335%" y="287.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (179 samples, 0.78%)</title><rect x="86.1835%" y="261" width="0.7849%" height="15" fill="rgb(211,154,13)" fg:x="19655" fg:w="179"/><text x="86.4335%" y="271.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (22 samples, 0.10%)</title><rect x="86.8719%" y="245" width="0.0965%" height="15" fill="rgb(225,148,7)" fg:x="19812" fg:w="22"/><text x="87.1219%" y="255.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2,029 samples, 8.90%)</title><rect x="78.6767%" y="309" width="8.8968%" height="15" fill="rgb(220,160,43)" fg:x="17943" fg:w="2029"/><text x="78.9267%" y="319.50">&lt;std::io::Wri..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1,926 samples, 8.45%)</title><rect x="79.1283%" y="293" width="8.4451%" height="15" fill="rgb(213,52,39)" fg:x="18046" fg:w="1926"/><text x="79.3783%" y="303.50">&lt;std::io::st..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt; (138 samples, 0.61%)</title><rect x="86.9683%" y="277" width="0.6051%" height="15" fill="rgb(243,137,7)" fg:x="19834" fg:w="138"/><text x="87.2183%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (138 samples, 0.61%)</title><rect x="86.9683%" y="261" width="0.6051%" height="15" fill="rgb(230,79,13)" fg:x="19834" fg:w="138"/><text x="87.2183%" y="271.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (138 samples, 0.61%)</title><rect x="86.9683%" y="245" width="0.6051%" height="15" fill="rgb(247,105,23)" fg:x="19834" fg:w="138"/><text x="87.2183%" y="255.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (138 samples, 0.61%)</title><rect x="86.9683%" y="229" width="0.6051%" height="15" fill="rgb(223,179,41)" fg:x="19834" fg:w="138"/><text x="87.2183%" y="239.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (138 samples, 0.61%)</title><rect x="86.9683%" y="213" width="0.6051%" height="15" fill="rgb(218,9,34)" fg:x="19834" fg:w="138"/><text x="87.2183%" y="223.50"></text></g><g><title>core::mem::replace (138 samples, 0.61%)</title><rect x="86.9683%" y="197" width="0.6051%" height="15" fill="rgb(222,106,8)" fg:x="19834" fg:w="138"/><text x="87.2183%" y="207.50"></text></g><g><title>core::ptr::write (138 samples, 0.61%)</title><rect x="86.9683%" y="181" width="0.6051%" height="15" fill="rgb(211,220,0)" fg:x="19834" fg:w="138"/><text x="87.2183%" y="191.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (11 samples, 0.05%)</title><rect x="87.5734%" y="309" width="0.0482%" height="15" fill="rgb(229,52,16)" fg:x="19972" fg:w="11"/><text x="87.8234%" y="319.50"></text></g><g><title>core::fmt::Formatter::new (27 samples, 0.12%)</title><rect x="87.6217%" y="309" width="0.1184%" height="15" fill="rgb(212,155,18)" fg:x="19983" fg:w="27"/><text x="87.8717%" y="319.50"></text></g><g><title>core::fmt::Formatter::pad (46 samples, 0.20%)</title><rect x="87.7401%" y="309" width="0.2017%" height="15" fill="rgb(242,21,14)" fg:x="20010" fg:w="46"/><text x="87.9901%" y="319.50"></text></g><g><title>core::iter::adapters::zip::zip (7 samples, 0.03%)</title><rect x="87.9418%" y="309" width="0.0307%" height="15" fill="rgb(222,19,48)" fg:x="20056" fg:w="7"/><text x="88.1918%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (7 samples, 0.03%)</title><rect x="87.9418%" y="293" width="0.0307%" height="15" fill="rgb(232,45,27)" fg:x="20056" fg:w="7"/><text x="88.1918%" y="303.50"></text></g><g><title>core::cmp::min (7 samples, 0.03%)</title><rect x="87.9418%" y="277" width="0.0307%" height="15" fill="rgb(249,103,42)" fg:x="20056" fg:w="7"/><text x="88.1918%" y="287.50"></text></g><g><title>core::cmp::Ord::min (7 samples, 0.03%)</title><rect x="87.9418%" y="261" width="0.0307%" height="15" fill="rgb(246,81,33)" fg:x="20056" fg:w="7"/><text x="88.1918%" y="271.50"></text></g><g><title>core::fmt::write (7 samples, 0.03%)</title><rect x="87.9418%" y="245" width="0.0307%" height="15" fill="rgb(252,33,42)" fg:x="20056" fg:w="7"/><text x="88.1918%" y="255.50"></text></g><g><title>core::fmt::Formatter::write_fmt (8,470 samples, 37.14%)</title><rect x="50.9077%" y="341" width="37.1393%" height="15" fill="rgb(209,212,41)" fg:x="11610" fg:w="8470"/><text x="51.1577%" y="351.50">core::fmt::Formatter::write_fmt</text></g><g><title>core::fmt::write (8,169 samples, 35.82%)</title><rect x="52.2275%" y="325" width="35.8195%" height="15" fill="rgb(207,154,6)" fg:x="11911" fg:w="8169"/><text x="52.4775%" y="335.50">core::fmt::write</text></g><g><title>core::str::&lt;impl str&gt;::is_empty (17 samples, 0.07%)</title><rect x="87.9725%" y="309" width="0.0745%" height="15" fill="rgb(223,64,47)" fg:x="20063" fg:w="17"/><text x="88.2225%" y="319.50"></text></g><g><title>&lt;rlox::expr::Binary&lt;L,R&gt; as core::fmt::Display&gt;::fmt (8,687 samples, 38.09%)</title><rect x="50.0877%" y="357" width="38.0909%" height="15" fill="rgb(211,161,38)" fg:x="11423" fg:w="8687"/><text x="50.3377%" y="367.50">&lt;rlox::expr::Binary&lt;L,R&gt; as core::fmt::Display&gt;::fmt</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (26 samples, 0.11%)</title><rect x="88.0645%" y="341" width="0.1140%" height="15" fill="rgb(219,138,40)" fg:x="20084" fg:w="26"/><text x="88.3145%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (26 samples, 0.11%)</title><rect x="88.0645%" y="325" width="0.1140%" height="15" fill="rgb(241,228,46)" fg:x="20084" fg:w="26"/><text x="88.3145%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (26 samples, 0.11%)</title><rect x="88.0645%" y="309" width="0.1140%" height="15" fill="rgb(223,209,38)" fg:x="20084" fg:w="26"/><text x="88.3145%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.11%)</title><rect x="88.0645%" y="293" width="0.1140%" height="15" fill="rgb(236,164,45)" fg:x="20084" fg:w="26"/><text x="88.3145%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (9 samples, 0.04%)</title><rect x="88.1391%" y="277" width="0.0395%" height="15" fill="rgb(231,15,5)" fg:x="20101" fg:w="9"/><text x="88.3891%" y="287.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::spare_capacity (46 samples, 0.20%)</title><rect x="88.4460%" y="277" width="0.2017%" height="15" fill="rgb(252,35,15)" fg:x="20171" fg:w="46"/><text x="88.6960%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (25 samples, 0.11%)</title><rect x="88.5381%" y="261" width="0.1096%" height="15" fill="rgb(248,181,18)" fg:x="20192" fg:w="25"/><text x="88.7881%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (17 samples, 0.07%)</title><rect x="88.6609%" y="261" width="0.0745%" height="15" fill="rgb(233,39,42)" fg:x="20220" fg:w="17"/><text x="88.9109%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (86 samples, 0.38%)</title><rect x="88.7354%" y="261" width="0.3771%" height="15" fill="rgb(238,110,33)" fg:x="20237" fg:w="86"/><text x="88.9854%" y="271.50"></text></g><g><title>__memmove_avx_unaligned_erms (81 samples, 0.36%)</title><rect x="88.7573%" y="245" width="0.3552%" height="15" fill="rgb(233,195,10)" fg:x="20242" fg:w="81"/><text x="89.0073%" y="255.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (163 samples, 0.71%)</title><rect x="88.4066%" y="293" width="0.7147%" height="15" fill="rgb(254,105,3)" fg:x="20162" fg:w="163"/><text x="88.6566%" y="303.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (108 samples, 0.47%)</title><rect x="88.6477%" y="277" width="0.4736%" height="15" fill="rgb(221,225,9)" fg:x="20217" fg:w="108"/><text x="88.8977%" y="287.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3 samples, 0.01%)</title><rect x="89.1213%" y="293" width="0.0132%" height="15" fill="rgb(224,227,45)" fg:x="20325" fg:w="3"/><text x="89.3713%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (6 samples, 0.03%)</title><rect x="89.1344%" y="293" width="0.0263%" height="15" fill="rgb(229,198,43)" fg:x="20328" fg:w="6"/><text x="89.3844%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (7 samples, 0.03%)</title><rect x="89.1607%" y="293" width="0.0307%" height="15" fill="rgb(206,209,35)" fg:x="20334" fg:w="7"/><text x="89.4107%" y="303.50"></text></g><g><title>__libc_write (509 samples, 2.23%)</title><rect x="89.7352%" y="229" width="2.2319%" height="15" fill="rgb(245,195,53)" fg:x="20465" fg:w="509"/><text x="89.9852%" y="239.50">_..</text></g><g><title>core::cmp::min (3 samples, 0.01%)</title><rect x="91.9670%" y="229" width="0.0132%" height="15" fill="rgb(240,92,26)" fg:x="20974" fg:w="3"/><text x="92.2170%" y="239.50"></text></g><g><title>core::cmp::Ord::min (3 samples, 0.01%)</title><rect x="91.9670%" y="213" width="0.0132%" height="15" fill="rgb(207,40,23)" fg:x="20974" fg:w="3"/><text x="92.2170%" y="223.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (3 samples, 0.01%)</title><rect x="91.9670%" y="197" width="0.0132%" height="15" fill="rgb(223,111,35)" fg:x="20974" fg:w="3"/><text x="92.2170%" y="207.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (11 samples, 0.05%)</title><rect x="91.9802%" y="229" width="0.0482%" height="15" fill="rgb(229,147,28)" fg:x="20977" fg:w="11"/><text x="92.2302%" y="239.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (543 samples, 2.38%)</title><rect x="89.6518%" y="261" width="2.3810%" height="15" fill="rgb(211,29,28)" fg:x="20446" fg:w="543"/><text x="89.9018%" y="271.50">&lt;s..</text></g><g><title>std::sys::unix::fd::FileDesc::write (543 samples, 2.38%)</title><rect x="89.6518%" y="245" width="2.3810%" height="15" fill="rgb(228,72,33)" fg:x="20446" fg:w="543"/><text x="89.9018%" y="255.50">st..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (623 samples, 2.73%)</title><rect x="89.6518%" y="277" width="2.7317%" height="15" fill="rgb(205,214,31)" fg:x="20446" fg:w="623"/><text x="89.9018%" y="287.50">&lt;s..</text></g><g><title>std::io::stdio::handle_ebadf (80 samples, 0.35%)</title><rect x="92.0328%" y="261" width="0.3508%" height="15" fill="rgb(224,111,15)" fg:x="20989" fg:w="80"/><text x="92.2828%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (10 samples, 0.04%)</title><rect x="92.3924%" y="229" width="0.0438%" height="15" fill="rgb(253,21,26)" fg:x="21071" fg:w="10"/><text x="92.6424%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (32 samples, 0.14%)</title><rect x="92.3924%" y="245" width="0.1403%" height="15" fill="rgb(245,139,43)" fg:x="21071" fg:w="32"/><text x="92.6424%" y="255.50"></text></g><g><title>core::slice::index::range (22 samples, 0.10%)</title><rect x="92.4362%" y="229" width="0.0965%" height="15" fill="rgb(252,170,7)" fg:x="21081" fg:w="22"/><text x="92.6862%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf::BufGuard&gt; (35 samples, 0.15%)</title><rect x="92.3836%" y="277" width="0.1535%" height="15" fill="rgb(231,118,14)" fg:x="21069" fg:w="35"/><text x="92.6336%" y="287.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf::BufGuard as core::ops::drop::Drop&gt;::drop (35 samples, 0.15%)</title><rect x="92.3836%" y="261" width="0.1535%" height="15" fill="rgb(238,83,0)" fg:x="21069" fg:w="35"/><text x="92.6336%" y="271.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf::BufGuard::consume (9 samples, 0.04%)</title><rect x="92.5371%" y="277" width="0.0395%" height="15" fill="rgb(221,39,39)" fg:x="21104" fg:w="9"/><text x="92.7871%" y="287.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf::BufGuard::done (36 samples, 0.16%)</title><rect x="92.5765%" y="277" width="0.1579%" height="15" fill="rgb(222,119,46)" fg:x="21113" fg:w="36"/><text x="92.8265%" y="287.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (826 samples, 3.62%)</title><rect x="89.1914%" y="293" width="3.6219%" height="15" fill="rgb(222,165,49)" fg:x="20341" fg:w="826"/><text x="89.4414%" y="303.50">std:..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf::BufGuard::remaining (18 samples, 0.08%)</title><rect x="92.7344%" y="277" width="0.0789%" height="15" fill="rgb(219,113,52)" fg:x="21149" fg:w="18"/><text x="92.9844%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (18 samples, 0.08%)</title><rect x="92.7344%" y="261" width="0.0789%" height="15" fill="rgb(214,7,15)" fg:x="21149" fg:w="18"/><text x="92.9844%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (18 samples, 0.08%)</title><rect x="92.7344%" y="245" width="0.0789%" height="15" fill="rgb(235,32,4)" fg:x="21149" fg:w="18"/><text x="92.9844%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (18 samples, 0.08%)</title><rect x="92.7344%" y="229" width="0.0789%" height="15" fill="rgb(238,90,54)" fg:x="21149" fg:w="18"/><text x="92.9844%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (8 samples, 0.04%)</title><rect x="92.7782%" y="213" width="0.0351%" height="15" fill="rgb(213,208,19)" fg:x="21159" fg:w="8"/><text x="93.0282%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (8 samples, 0.04%)</title><rect x="92.7782%" y="197" width="0.0351%" height="15" fill="rgb(233,156,4)" fg:x="21159" fg:w="8"/><text x="93.0282%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (8 samples, 0.04%)</title><rect x="92.7782%" y="181" width="0.0351%" height="15" fill="rgb(207,194,5)" fg:x="21159" fg:w="8"/><text x="93.0282%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (8 samples, 0.04%)</title><rect x="92.7782%" y="165" width="0.0351%" height="15" fill="rgb(206,111,30)" fg:x="21159" fg:w="8"/><text x="93.0282%" y="175.50"></text></g><g><title>__memrchr_avx2 (137 samples, 0.60%)</title><rect x="92.8878%" y="245" width="0.6007%" height="15" fill="rgb(243,70,54)" fg:x="21184" fg:w="137"/><text x="93.1378%" y="255.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (1,175 samples, 5.15%)</title><rect x="88.3408%" y="309" width="5.1522%" height="15" fill="rgb(242,28,8)" fg:x="20147" fg:w="1175"/><text x="88.5908%" y="319.50">&lt;std::..</text></g><g><title>std::sys_common::memchr::memrchr (155 samples, 0.68%)</title><rect x="92.8133%" y="293" width="0.6796%" height="15" fill="rgb(219,106,18)" fg:x="21167" fg:w="155"/><text x="93.0633%" y="303.50"></text></g><g><title>std::sys::unix::memchr::memrchr (155 samples, 0.68%)</title><rect x="92.8133%" y="277" width="0.6796%" height="15" fill="rgb(244,222,10)" fg:x="21167" fg:w="155"/><text x="93.0633%" y="287.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (155 samples, 0.68%)</title><rect x="92.8133%" y="261" width="0.6796%" height="15" fill="rgb(236,179,52)" fg:x="21167" fg:w="155"/><text x="93.0633%" y="271.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (1,275 samples, 5.59%)</title><rect x="88.3408%" y="325" width="5.5906%" height="15" fill="rgb(213,23,39)" fg:x="20147" fg:w="1275"/><text x="88.5908%" y="335.50">&lt;std::i..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (100 samples, 0.44%)</title><rect x="93.4929%" y="309" width="0.4385%" height="15" fill="rgb(238,48,10)" fg:x="21322" fg:w="100"/><text x="93.7429%" y="319.50"></text></g><g><title>__memmove_avx_unaligned_erms (31 samples, 0.14%)</title><rect x="93.7955%" y="293" width="0.1359%" height="15" fill="rgb(251,196,23)" fg:x="21391" fg:w="31"/><text x="94.0455%" y="303.50"></text></g><g><title>core::cell::BorrowRefMut::new (24 samples, 0.11%)</title><rect x="93.9314%" y="293" width="0.1052%" height="15" fill="rgb(250,152,24)" fg:x="21422" fg:w="24"/><text x="94.1814%" y="303.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (10 samples, 0.04%)</title><rect x="93.9928%" y="277" width="0.0438%" height="15" fill="rgb(209,150,17)" fg:x="21436" fg:w="10"/><text x="94.2428%" y="287.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (10 samples, 0.04%)</title><rect x="93.9928%" y="261" width="0.0438%" height="15" fill="rgb(234,202,34)" fg:x="21436" fg:w="10"/><text x="94.2428%" y="271.50"></text></g><g><title>core::mem::replace (10 samples, 0.04%)</title><rect x="93.9928%" y="245" width="0.0438%" height="15" fill="rgb(253,148,53)" fg:x="21436" fg:w="10"/><text x="94.2428%" y="255.50"></text></g><g><title>core::ptr::write (10 samples, 0.04%)</title><rect x="93.9928%" y="229" width="0.0438%" height="15" fill="rgb(218,129,16)" fg:x="21436" fg:w="10"/><text x="94.2428%" y="239.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (28 samples, 0.12%)</title><rect x="93.9314%" y="325" width="0.1228%" height="15" fill="rgb(216,85,19)" fg:x="21422" fg:w="28"/><text x="94.1814%" y="335.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (28 samples, 0.12%)</title><rect x="93.9314%" y="309" width="0.1228%" height="15" fill="rgb(235,228,7)" fg:x="21422" fg:w="28"/><text x="94.1814%" y="319.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (4 samples, 0.02%)</title><rect x="94.0367%" y="293" width="0.0175%" height="15" fill="rgb(245,175,0)" fg:x="21446" fg:w="4"/><text x="94.2867%" y="303.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1,359 samples, 5.96%)</title><rect x="88.1785%" y="357" width="5.9590%" height="15" fill="rgb(208,168,36)" fg:x="20110" fg:w="1359"/><text x="88.4285%" y="367.50">&lt;std::io..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1,335 samples, 5.85%)</title><rect x="88.2838%" y="341" width="5.8537%" height="15" fill="rgb(246,171,24)" fg:x="20134" fg:w="1335"/><text x="88.5338%" y="351.50">&lt;std::i..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt; (19 samples, 0.08%)</title><rect x="94.0542%" y="325" width="0.0833%" height="15" fill="rgb(215,142,24)" fg:x="21450" fg:w="19"/><text x="94.3042%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (19 samples, 0.08%)</title><rect x="94.0542%" y="309" width="0.0833%" height="15" fill="rgb(250,187,7)" fg:x="21450" fg:w="19"/><text x="94.3042%" y="319.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (19 samples, 0.08%)</title><rect x="94.0542%" y="293" width="0.0833%" height="15" fill="rgb(228,66,33)" fg:x="21450" fg:w="19"/><text x="94.3042%" y="303.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (19 samples, 0.08%)</title><rect x="94.0542%" y="277" width="0.0833%" height="15" fill="rgb(234,215,21)" fg:x="21450" fg:w="19"/><text x="94.3042%" y="287.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (19 samples, 0.08%)</title><rect x="94.0542%" y="261" width="0.0833%" height="15" fill="rgb(222,191,20)" fg:x="21450" fg:w="19"/><text x="94.3042%" y="271.50"></text></g><g><title>core::mem::replace (19 samples, 0.08%)</title><rect x="94.0542%" y="245" width="0.0833%" height="15" fill="rgb(245,79,54)" fg:x="21450" fg:w="19"/><text x="94.3042%" y="255.50"></text></g><g><title>core::ptr::write (19 samples, 0.08%)</title><rect x="94.0542%" y="229" width="0.0833%" height="15" fill="rgb(240,10,37)" fg:x="21450" fg:w="19"/><text x="94.3042%" y="239.50"></text></g><g><title>core::fmt::Formatter::new (35 samples, 0.15%)</title><rect x="94.1375%" y="357" width="0.1535%" height="15" fill="rgb(214,192,32)" fg:x="21469" fg:w="35"/><text x="94.3875%" y="367.50"></text></g><g><title>core::fmt::write (10,243 samples, 44.91%)</title><rect x="49.4124%" y="373" width="44.9136%" height="15" fill="rgb(209,36,54)" fg:x="11269" fg:w="10243"/><text x="49.6624%" y="383.50">core::fmt::write</text></g><g><title>core::iter::adapters::zip::zip (8 samples, 0.04%)</title><rect x="94.2910%" y="357" width="0.0351%" height="15" fill="rgb(220,10,11)" fg:x="21504" fg:w="8"/><text x="94.5410%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (8 samples, 0.04%)</title><rect x="94.2910%" y="341" width="0.0351%" height="15" fill="rgb(221,106,17)" fg:x="21504" fg:w="8"/><text x="94.5410%" y="351.50"></text></g><g><title>core::cmp::min (8 samples, 0.04%)</title><rect x="94.2910%" y="325" width="0.0351%" height="15" fill="rgb(251,142,44)" fg:x="21504" fg:w="8"/><text x="94.5410%" y="335.50"></text></g><g><title>core::cmp::Ord::min (8 samples, 0.04%)</title><rect x="94.2910%" y="309" width="0.0351%" height="15" fill="rgb(238,13,15)" fg:x="21504" fg:w="8"/><text x="94.5410%" y="319.50"></text></g><g><title>core::fmt::write (7 samples, 0.03%)</title><rect x="94.2954%" y="293" width="0.0307%" height="15" fill="rgb(208,107,27)" fg:x="21505" fg:w="7"/><text x="94.5454%" y="303.50"></text></g><g><title>std::io::Write::write_fmt (10,307 samples, 45.19%)</title><rect x="49.1844%" y="389" width="45.1942%" height="15" fill="rgb(205,136,37)" fg:x="11217" fg:w="10307"/><text x="49.4344%" y="399.50">std::io::Write::write_fmt</text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;(),std::io::error::Error&gt;&gt; (12 samples, 0.05%)</title><rect x="94.3261%" y="373" width="0.0526%" height="15" fill="rgb(250,205,27)" fg:x="21512" fg:w="12"/><text x="94.5761%" y="383.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (11,195 samples, 49.09%)</title><rect x="46.8736%" y="421" width="49.0880%" height="15" fill="rgb(210,80,43)" fg:x="10690" fg:w="11195"/><text x="47.1236%" y="431.50">&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (11,167 samples, 48.97%)</title><rect x="46.9964%" y="405" width="48.9652%" height="15" fill="rgb(247,160,36)" fg:x="10718" fg:w="11167"/><text x="47.2464%" y="415.50">&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt</text></g><g><title>std::io::stdio::Stdout::lock (361 samples, 1.58%)</title><rect x="94.3787%" y="389" width="1.5829%" height="15" fill="rgb(234,13,49)" fg:x="21524" fg:w="361"/><text x="94.6287%" y="399.50"></text></g><g><title>std::io::stdio::Stdout::lock_any (359 samples, 1.57%)</title><rect x="94.3874%" y="373" width="1.5741%" height="15" fill="rgb(234,122,0)" fg:x="21526" fg:w="359"/><text x="94.6374%" y="383.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (359 samples, 1.57%)</title><rect x="94.3874%" y="357" width="1.5741%" height="15" fill="rgb(207,146,38)" fg:x="21526" fg:w="359"/><text x="94.6374%" y="367.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (359 samples, 1.57%)</title><rect x="94.3874%" y="341" width="1.5741%" height="15" fill="rgb(207,177,25)" fg:x="21526" fg:w="359"/><text x="94.6374%" y="351.50"></text></g><g><title>__GI___pthread_mutex_lock (359 samples, 1.57%)</title><rect x="94.3874%" y="325" width="1.5741%" height="15" fill="rgb(211,178,42)" fg:x="21526" fg:w="359"/><text x="94.6374%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (3 samples, 0.01%)</title><rect x="95.9616%" y="421" width="0.0132%" height="15" fill="rgb(230,69,54)" fg:x="21885" fg:w="3"/><text x="96.2116%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.01%)</title><rect x="95.9616%" y="405" width="0.0132%" height="15" fill="rgb(214,135,41)" fg:x="21885" fg:w="3"/><text x="96.2116%" y="415.50"></text></g><g><title>_start (14,791 samples, 64.86%)</title><rect x="31.1848%" y="709" width="64.8557%" height="15" fill="rgb(237,67,25)" fg:x="7112" fg:w="14791"/><text x="31.4348%" y="719.50">_start</text></g><g><title>__libc_start_main (14,791 samples, 64.86%)</title><rect x="31.1848%" y="693" width="64.8557%" height="15" fill="rgb(222,189,50)" fg:x="7112" fg:w="14791"/><text x="31.4348%" y="703.50">__libc_start_main</text></g><g><title>main (14,790 samples, 64.85%)</title><rect x="31.1892%" y="677" width="64.8514%" height="15" fill="rgb(245,148,34)" fg:x="7113" fg:w="14790"/><text x="31.4392%" y="687.50">main</text></g><g><title>std::rt::lang_start_internal (14,790 samples, 64.85%)</title><rect x="31.1892%" y="661" width="64.8514%" height="15" fill="rgb(222,29,6)" fg:x="7113" fg:w="14790"/><text x="31.4392%" y="671.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (14,790 samples, 64.85%)</title><rect x="31.1892%" y="645" width="64.8514%" height="15" fill="rgb(221,189,43)" fg:x="7113" fg:w="14790"/><text x="31.4392%" y="655.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (14,790 samples, 64.85%)</title><rect x="31.1892%" y="629" width="64.8514%" height="15" fill="rgb(207,36,27)" fg:x="7113" fg:w="14790"/><text x="31.4392%" y="639.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (14,790 samples, 64.85%)</title><rect x="31.1892%" y="613" width="64.8514%" height="15" fill="rgb(217,90,24)" fg:x="7113" fg:w="14790"/><text x="31.4392%" y="623.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (14,790 samples, 64.85%)</title><rect x="31.1892%" y="597" width="64.8514%" height="15" fill="rgb(224,66,35)" fg:x="7113" fg:w="14790"/><text x="31.4392%" y="607.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (14,790 samples, 64.85%)</title><rect x="31.1892%" y="581" width="64.8514%" height="15" fill="rgb(221,13,50)" fg:x="7113" fg:w="14790"/><text x="31.4392%" y="591.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (14,790 samples, 64.85%)</title><rect x="31.1892%" y="565" width="64.8514%" height="15" fill="rgb(236,68,49)" fg:x="7113" fg:w="14790"/><text x="31.4392%" y="575.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (14,790 samples, 64.85%)</title><rect x="31.1892%" y="549" width="64.8514%" height="15" fill="rgb(229,146,28)" fg:x="7113" fg:w="14790"/><text x="31.4392%" y="559.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (14,790 samples, 64.85%)</title><rect x="31.1892%" y="533" width="64.8514%" height="15" fill="rgb(225,31,38)" fg:x="7113" fg:w="14790"/><text x="31.4392%" y="543.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (14,790 samples, 64.85%)</title><rect x="31.1892%" y="517" width="64.8514%" height="15" fill="rgb(250,208,3)" fg:x="7113" fg:w="14790"/><text x="31.4392%" y="527.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (14,790 samples, 64.85%)</title><rect x="31.1892%" y="501" width="64.8514%" height="15" fill="rgb(246,54,23)" fg:x="7113" fg:w="14790"/><text x="31.4392%" y="511.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (14,790 samples, 64.85%)</title><rect x="31.1892%" y="485" width="64.8514%" height="15" fill="rgb(243,76,11)" fg:x="7113" fg:w="14790"/><text x="31.4392%" y="495.50">core::ops::function::FnOnce::call_once</text></g><g><title>expr_example::main (14,790 samples, 64.85%)</title><rect x="31.1892%" y="469" width="64.8514%" height="15" fill="rgb(245,21,50)" fg:x="7113" fg:w="14790"/><text x="31.4392%" y="479.50">expr_example::main</text></g><g><title>std::io::stdio::_print (11,490 samples, 50.38%)</title><rect x="45.6590%" y="453" width="50.3815%" height="15" fill="rgb(228,9,43)" fg:x="10413" fg:w="11490"/><text x="45.9090%" y="463.50">std::io::stdio::_print</text></g><g><title>std::io::stdio::print_to (11,229 samples, 49.24%)</title><rect x="46.8035%" y="437" width="49.2370%" height="15" fill="rgb(208,100,47)" fg:x="10674" fg:w="11229"/><text x="47.0535%" y="447.50">std::io::stdio::print_to</text></g><g><title>std::io::stdio::stdout (15 samples, 0.07%)</title><rect x="95.9747%" y="421" width="0.0658%" height="15" fill="rgb(232,26,8)" fg:x="21888" fg:w="15"/><text x="96.2247%" y="431.50"></text></g><g><title>std::lazy::SyncOnceCell&lt;T&gt;::get_or_init_pin (15 samples, 0.07%)</title><rect x="95.9747%" y="405" width="0.0658%" height="15" fill="rgb(216,166,38)" fg:x="21888" fg:w="15"/><text x="96.2247%" y="415.50"></text></g><g><title>std::lazy::SyncOnceCell&lt;T&gt;::get (15 samples, 0.07%)</title><rect x="95.9747%" y="389" width="0.0658%" height="15" fill="rgb(251,202,51)" fg:x="21888" fg:w="15"/><text x="96.2247%" y="399.50"></text></g><g><title>std::lazy::SyncOnceCell&lt;T&gt;::is_initialized (15 samples, 0.07%)</title><rect x="95.9747%" y="373" width="0.0658%" height="15" fill="rgb(254,216,34)" fg:x="21888" fg:w="15"/><text x="96.2247%" y="383.50"></text></g><g><title>std::sync::once::Once::is_completed (15 samples, 0.07%)</title><rect x="95.9747%" y="357" width="0.0658%" height="15" fill="rgb(251,32,27)" fg:x="21888" fg:w="15"/><text x="96.2247%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (15 samples, 0.07%)</title><rect x="95.9747%" y="341" width="0.0658%" height="15" fill="rgb(208,127,28)" fg:x="21888" fg:w="15"/><text x="96.2247%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_load (15 samples, 0.07%)</title><rect x="95.9747%" y="325" width="0.0658%" height="15" fill="rgb(224,137,22)" fg:x="21888" fg:w="15"/><text x="96.2247%" y="335.50"></text></g><g><title>core::fmt::Formatter::pad (132 samples, 0.58%)</title><rect x="96.0405%" y="709" width="0.5788%" height="15" fill="rgb(254,70,32)" fg:x="21903" fg:w="132"/><text x="96.2905%" y="719.50"></text></g><g><title>core::fmt::Formatter::write_fmt (112 samples, 0.49%)</title><rect x="96.6193%" y="709" width="0.4911%" height="15" fill="rgb(229,75,37)" fg:x="22035" fg:w="112"/><text x="96.8693%" y="719.50"></text></g><g><title>core::fmt::write (334 samples, 1.46%)</title><rect x="97.1104%" y="709" width="1.4645%" height="15" fill="rgb(252,64,23)" fg:x="22147" fg:w="334"/><text x="97.3604%" y="719.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (30 samples, 0.13%)</title><rect x="98.6539%" y="693" width="0.1315%" height="15" fill="rgb(232,162,48)" fg:x="22499" fg:w="30"/><text x="98.9039%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (30 samples, 0.13%)</title><rect x="98.6539%" y="677" width="0.1315%" height="15" fill="rgb(246,160,12)" fg:x="22499" fg:w="30"/><text x="98.9039%" y="687.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (30 samples, 0.13%)</title><rect x="98.6539%" y="661" width="0.1315%" height="15" fill="rgb(247,166,0)" fg:x="22499" fg:w="30"/><text x="98.9039%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (30 samples, 0.13%)</title><rect x="98.6539%" y="645" width="0.1315%" height="15" fill="rgb(249,219,21)" fg:x="22499" fg:w="30"/><text x="98.9039%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (30 samples, 0.13%)</title><rect x="98.6539%" y="629" width="0.1315%" height="15" fill="rgb(205,209,3)" fg:x="22499" fg:w="30"/><text x="98.9039%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (30 samples, 0.13%)</title><rect x="98.6539%" y="613" width="0.1315%" height="15" fill="rgb(243,44,1)" fg:x="22499" fg:w="30"/><text x="98.9039%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (30 samples, 0.13%)</title><rect x="98.6539%" y="597" width="0.1315%" height="15" fill="rgb(206,159,16)" fg:x="22499" fg:w="30"/><text x="98.9039%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (30 samples, 0.13%)</title><rect x="98.6539%" y="581" width="0.1315%" height="15" fill="rgb(244,77,30)" fg:x="22499" fg:w="30"/><text x="98.9039%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (30 samples, 0.13%)</title><rect x="98.6539%" y="565" width="0.1315%" height="15" fill="rgb(218,69,12)" fg:x="22499" fg:w="30"/><text x="98.9039%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (30 samples, 0.13%)</title><rect x="98.6539%" y="549" width="0.1315%" height="15" fill="rgb(212,87,7)" fg:x="22499" fg:w="30"/><text x="98.9039%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (30 samples, 0.13%)</title><rect x="98.6539%" y="533" width="0.1315%" height="15" fill="rgb(245,114,25)" fg:x="22499" fg:w="30"/><text x="98.9039%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (30 samples, 0.13%)</title><rect x="98.6539%" y="517" width="0.1315%" height="15" fill="rgb(210,61,42)" fg:x="22499" fg:w="30"/><text x="98.9039%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (30 samples, 0.13%)</title><rect x="98.6539%" y="501" width="0.1315%" height="15" fill="rgb(211,52,33)" fg:x="22499" fg:w="30"/><text x="98.9039%" y="511.50"></text></g><g><title>alloc::alloc::alloc (30 samples, 0.13%)</title><rect x="98.6539%" y="485" width="0.1315%" height="15" fill="rgb(234,58,33)" fg:x="22499" fg:w="30"/><text x="98.9039%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::expr::Literal&gt; (14 samples, 0.06%)</title><rect x="98.7854%" y="645" width="0.0614%" height="15" fill="rgb(220,115,36)" fg:x="22529" fg:w="14"/><text x="99.0354%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::token::Token&gt; (14 samples, 0.06%)</title><rect x="98.7854%" y="629" width="0.0614%" height="15" fill="rgb(243,153,54)" fg:x="22529" fg:w="14"/><text x="99.0354%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (14 samples, 0.06%)</title><rect x="98.7854%" y="613" width="0.0614%" height="15" fill="rgb(251,47,18)" fg:x="22529" fg:w="14"/><text x="99.0354%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (14 samples, 0.06%)</title><rect x="98.7854%" y="597" width="0.0614%" height="15" fill="rgb(242,102,42)" fg:x="22529" fg:w="14"/><text x="99.0354%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (14 samples, 0.06%)</title><rect x="98.7854%" y="581" width="0.0614%" height="15" fill="rgb(234,31,38)" fg:x="22529" fg:w="14"/><text x="99.0354%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (14 samples, 0.06%)</title><rect x="98.7854%" y="565" width="0.0614%" height="15" fill="rgb(221,117,51)" fg:x="22529" fg:w="14"/><text x="99.0354%" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.06%)</title><rect x="98.7854%" y="549" width="0.0614%" height="15" fill="rgb(212,20,18)" fg:x="22529" fg:w="14"/><text x="99.0354%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.06%)</title><rect x="98.7854%" y="533" width="0.0614%" height="15" fill="rgb(245,133,36)" fg:x="22529" fg:w="14"/><text x="99.0354%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.06%)</title><rect x="98.7854%" y="517" width="0.0614%" height="15" fill="rgb(212,6,19)" fg:x="22529" fg:w="14"/><text x="99.0354%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::expr::Grouping&lt;rlox::expr::Unary&lt;rlox::expr::Literal&gt;&gt;&gt; (17 samples, 0.07%)</title><rect x="98.7854%" y="677" width="0.0745%" height="15" fill="rgb(218,1,36)" fg:x="22529" fg:w="17"/><text x="99.0354%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::expr::Unary&lt;rlox::expr::Literal&gt;&gt; (17 samples, 0.07%)</title><rect x="98.7854%" y="661" width="0.0745%" height="15" fill="rgb(246,84,54)" fg:x="22529" fg:w="17"/><text x="99.0354%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::token::Token&gt; (3 samples, 0.01%)</title><rect x="98.8468%" y="645" width="0.0132%" height="15" fill="rgb(242,110,6)" fg:x="22543" fg:w="3"/><text x="99.0968%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (3 samples, 0.01%)</title><rect x="98.8468%" y="629" width="0.0132%" height="15" fill="rgb(214,47,5)" fg:x="22543" fg:w="3"/><text x="99.0968%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3 samples, 0.01%)</title><rect x="98.8468%" y="613" width="0.0132%" height="15" fill="rgb(218,159,25)" fg:x="22543" fg:w="3"/><text x="99.0968%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 0.01%)</title><rect x="98.8468%" y="597" width="0.0132%" height="15" fill="rgb(215,211,28)" fg:x="22543" fg:w="3"/><text x="99.0968%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 0.01%)</title><rect x="98.8468%" y="581" width="0.0132%" height="15" fill="rgb(238,59,32)" fg:x="22543" fg:w="3"/><text x="99.0968%" y="591.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="98.8468%" y="565" width="0.0132%" height="15" fill="rgb(226,82,3)" fg:x="22543" fg:w="3"/><text x="99.0968%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.01%)</title><rect x="98.8468%" y="549" width="0.0132%" height="15" fill="rgb(240,164,32)" fg:x="22543" fg:w="3"/><text x="99.0968%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.01%)</title><rect x="98.8468%" y="533" width="0.0132%" height="15" fill="rgb(232,46,7)" fg:x="22543" fg:w="3"/><text x="99.0968%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::expr::Literal&gt; (19 samples, 0.08%)</title><rect x="98.8599%" y="677" width="0.0833%" height="15" fill="rgb(229,129,53)" fg:x="22546" fg:w="19"/><text x="99.1099%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::token::Token&gt; (19 samples, 0.08%)</title><rect x="98.8599%" y="661" width="0.0833%" height="15" fill="rgb(234,188,29)" fg:x="22546" fg:w="19"/><text x="99.1099%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (19 samples, 0.08%)</title><rect x="98.8599%" y="645" width="0.0833%" height="15" fill="rgb(246,141,4)" fg:x="22546" fg:w="19"/><text x="99.1099%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (19 samples, 0.08%)</title><rect x="98.8599%" y="629" width="0.0833%" height="15" fill="rgb(229,23,39)" fg:x="22546" fg:w="19"/><text x="99.1099%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (19 samples, 0.08%)</title><rect x="98.8599%" y="613" width="0.0833%" height="15" fill="rgb(206,12,3)" fg:x="22546" fg:w="19"/><text x="99.1099%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (19 samples, 0.08%)</title><rect x="98.8599%" y="597" width="0.0833%" height="15" fill="rgb(252,226,20)" fg:x="22546" fg:w="19"/><text x="99.1099%" y="607.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.08%)</title><rect x="98.8599%" y="581" width="0.0833%" height="15" fill="rgb(216,123,35)" fg:x="22546" fg:w="19"/><text x="99.1099%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (19 samples, 0.08%)</title><rect x="98.8599%" y="565" width="0.0833%" height="15" fill="rgb(212,68,40)" fg:x="22546" fg:w="19"/><text x="99.1099%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (19 samples, 0.08%)</title><rect x="98.8599%" y="549" width="0.0833%" height="15" fill="rgb(254,125,32)" fg:x="22546" fg:w="19"/><text x="99.1099%" y="559.50"></text></g><g><title>expr_example::main (95 samples, 0.42%)</title><rect x="98.5749%" y="709" width="0.4166%" height="15" fill="rgb(253,97,22)" fg:x="22481" fg:w="95"/><text x="98.8249%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::expr::Binary&lt;rlox::expr::Grouping&lt;rlox::expr::Unary&lt;rlox::expr::Literal&gt;&gt;,rlox::expr::Literal&gt;&gt; (47 samples, 0.21%)</title><rect x="98.7854%" y="693" width="0.2061%" height="15" fill="rgb(241,101,14)" fg:x="22529" fg:w="47"/><text x="99.0354%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::token::Token&gt; (11 samples, 0.05%)</title><rect x="98.9433%" y="677" width="0.0482%" height="15" fill="rgb(238,103,29)" fg:x="22565" fg:w="11"/><text x="99.1933%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (11 samples, 0.05%)</title><rect x="98.9433%" y="661" width="0.0482%" height="15" fill="rgb(233,195,47)" fg:x="22565" fg:w="11"/><text x="99.1933%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (11 samples, 0.05%)</title><rect x="98.9433%" y="645" width="0.0482%" height="15" fill="rgb(246,218,30)" fg:x="22565" fg:w="11"/><text x="99.1933%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (11 samples, 0.05%)</title><rect x="98.9433%" y="629" width="0.0482%" height="15" fill="rgb(219,145,47)" fg:x="22565" fg:w="11"/><text x="99.1933%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (11 samples, 0.05%)</title><rect x="98.9433%" y="613" width="0.0482%" height="15" fill="rgb(243,12,26)" fg:x="22565" fg:w="11"/><text x="99.1933%" y="623.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.05%)</title><rect x="98.9433%" y="597" width="0.0482%" height="15" fill="rgb(214,87,16)" fg:x="22565" fg:w="11"/><text x="99.1933%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.05%)</title><rect x="98.9433%" y="581" width="0.0482%" height="15" fill="rgb(208,99,42)" fg:x="22565" fg:w="11"/><text x="99.1933%" y="591.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.05%)</title><rect x="98.9433%" y="565" width="0.0482%" height="15" fill="rgb(253,99,2)" fg:x="22565" fg:w="11"/><text x="99.1933%" y="575.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (148 samples, 0.65%)</title><rect x="98.9915%" y="709" width="0.6490%" height="15" fill="rgb(220,168,23)" fg:x="22576" fg:w="148"/><text x="99.2415%" y="719.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (32 samples, 0.14%)</title><rect x="99.5001%" y="693" width="0.1403%" height="15" fill="rgb(242,38,24)" fg:x="22692" fg:w="32"/><text x="99.7501%" y="703.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (32 samples, 0.14%)</title><rect x="99.5001%" y="677" width="0.1403%" height="15" fill="rgb(225,182,9)" fg:x="22692" fg:w="32"/><text x="99.7501%" y="687.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (32 samples, 0.14%)</title><rect x="99.5001%" y="661" width="0.1403%" height="15" fill="rgb(243,178,37)" fg:x="22692" fg:w="32"/><text x="99.7501%" y="671.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (6 samples, 0.03%)</title><rect x="99.6404%" y="693" width="0.0263%" height="15" fill="rgb(232,139,19)" fg:x="22724" fg:w="6"/><text x="99.8904%" y="703.50"></text></g><g><title>__GI___pthread_mutex_lock (12 samples, 0.05%)</title><rect x="99.6711%" y="693" width="0.0526%" height="15" fill="rgb(225,201,24)" fg:x="22731" fg:w="12"/><text x="99.9211%" y="703.50"></text></g><g><title>core::fmt::Formatter::write_fmt (16 samples, 0.07%)</title><rect x="99.7238%" y="693" width="0.0702%" height="15" fill="rgb(221,47,46)" fg:x="22743" fg:w="16"/><text x="99.9738%" y="703.50"></text></g><g><title>std::io::stdio::STDOUT (65 samples, 0.29%)</title><rect x="99.6404%" y="709" width="0.2850%" height="15" fill="rgb(249,23,13)" fg:x="22724" fg:w="65"/><text x="99.8904%" y="719.50"></text></g><g><title>core::fmt::write (30 samples, 0.13%)</title><rect x="99.7939%" y="693" width="0.1315%" height="15" fill="rgb(219,9,5)" fg:x="22759" fg:w="30"/><text x="100.0439%" y="703.50"></text></g><g><title>all (22,806 samples, 100%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(254,171,16)" fg:x="0" fg:w="22806"/><text x="0.2500%" y="751.50"></text></g><g><title>expr-example (22,806 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(230,171,20)" fg:x="0" fg:w="22806"/><text x="0.2500%" y="735.50">expr-example</text></g><g><title>std::io::stdio::_print (17 samples, 0.07%)</title><rect x="99.9255%" y="709" width="0.0745%" height="15" fill="rgb(210,71,41)" fg:x="22789" fg:w="17"/><text x="100.1755%" y="719.50"></text></g></svg></svg>