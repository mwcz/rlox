<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="694" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="677.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="677.00"> </text><svg id="frames" x="10" width="1180" total_samples="8309"><g><title>.annobin_lto (5 samples, 0.06%)</title><rect x="0.0000%" y="613" width="0.0602%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.0602%" y="613" width="0.0120%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="1"/><text x="0.3102%" y="623.50"></text></g><g><title>_dl_new_object (1 samples, 0.01%)</title><rect x="0.0602%" y="597" width="0.0120%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="1"/><text x="0.3102%" y="607.50"></text></g><g><title>__dso_handle (1 samples, 0.01%)</title><rect x="0.0722%" y="613" width="0.0120%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="1"/><text x="0.3222%" y="623.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.01%)</title><rect x="0.0722%" y="597" width="0.0120%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="1"/><text x="0.3222%" y="607.50"></text></g><g><title>_fini (1 samples, 0.01%)</title><rect x="0.0842%" y="613" width="0.0120%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="1"/><text x="0.3342%" y="623.50"></text></g><g><title>rlox::scanner::Scanner::add_token (1 samples, 0.01%)</title><rect x="0.0842%" y="597" width="0.0120%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="1"/><text x="0.3342%" y="607.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="0.0963%" y="613" width="0.0120%" height="15" fill="rgb(228,23,34)" fg:x="8" fg:w="1"/><text x="0.3463%" y="623.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.05%)</title><rect x="0.1083%" y="149" width="0.0481%" height="15" fill="rgb(218,30,26)" fg:x="9" fg:w="4"/><text x="0.3583%" y="159.50"></text></g><g><title>alloc::string::String::with_capacity (5 samples, 0.06%)</title><rect x="0.1083%" y="277" width="0.0602%" height="15" fill="rgb(220,122,19)" fg:x="9" fg:w="5"/><text x="0.3583%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (5 samples, 0.06%)</title><rect x="0.1083%" y="261" width="0.0602%" height="15" fill="rgb(250,228,42)" fg:x="9" fg:w="5"/><text x="0.3583%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.06%)</title><rect x="0.1083%" y="245" width="0.0602%" height="15" fill="rgb(240,193,28)" fg:x="9" fg:w="5"/><text x="0.3583%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.06%)</title><rect x="0.1083%" y="229" width="0.0602%" height="15" fill="rgb(216,20,37)" fg:x="9" fg:w="5"/><text x="0.3583%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.06%)</title><rect x="0.1083%" y="213" width="0.0602%" height="15" fill="rgb(206,188,39)" fg:x="9" fg:w="5"/><text x="0.3583%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.06%)</title><rect x="0.1083%" y="197" width="0.0602%" height="15" fill="rgb(217,207,13)" fg:x="9" fg:w="5"/><text x="0.3583%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.06%)</title><rect x="0.1083%" y="181" width="0.0602%" height="15" fill="rgb(231,73,38)" fg:x="9" fg:w="5"/><text x="0.3583%" y="191.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.06%)</title><rect x="0.1083%" y="165" width="0.0602%" height="15" fill="rgb(225,20,46)" fg:x="9" fg:w="5"/><text x="0.3583%" y="175.50"></text></g><g><title>__rust_alloc (1 samples, 0.01%)</title><rect x="0.1565%" y="149" width="0.0120%" height="15" fill="rgb(210,31,41)" fg:x="13" fg:w="1"/><text x="0.4065%" y="159.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.01%)</title><rect x="0.1685%" y="277" width="0.0120%" height="15" fill="rgb(221,200,47)" fg:x="14" fg:w="1"/><text x="0.4185%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.01%)</title><rect x="0.1685%" y="261" width="0.0120%" height="15" fill="rgb(226,26,5)" fg:x="14" fg:w="1"/><text x="0.4185%" y="271.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.01%)</title><rect x="0.1685%" y="245" width="0.0120%" height="15" fill="rgb(249,33,26)" fg:x="14" fg:w="1"/><text x="0.4185%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="0.1685%" y="229" width="0.0120%" height="15" fill="rgb(235,183,28)" fg:x="14" fg:w="1"/><text x="0.4185%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.01%)</title><rect x="0.1685%" y="213" width="0.0120%" height="15" fill="rgb(221,5,38)" fg:x="14" fg:w="1"/><text x="0.4185%" y="223.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.01%)</title><rect x="0.1685%" y="197" width="0.0120%" height="15" fill="rgb(247,18,42)" fg:x="14" fg:w="1"/><text x="0.4185%" y="207.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.01%)</title><rect x="0.1685%" y="181" width="0.0120%" height="15" fill="rgb(241,131,45)" fg:x="14" fg:w="1"/><text x="0.4185%" y="191.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.01%)</title><rect x="0.1805%" y="245" width="0.0120%" height="15" fill="rgb(249,31,29)" fg:x="15" fg:w="1"/><text x="0.4305%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.01%)</title><rect x="0.1805%" y="229" width="0.0120%" height="15" fill="rgb(225,111,53)" fg:x="15" fg:w="1"/><text x="0.4305%" y="239.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.01%)</title><rect x="0.1805%" y="213" width="0.0120%" height="15" fill="rgb(238,160,17)" fg:x="15" fg:w="1"/><text x="0.4305%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.01%)</title><rect x="0.1805%" y="197" width="0.0120%" height="15" fill="rgb(214,148,48)" fg:x="15" fg:w="1"/><text x="0.4305%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.01%)</title><rect x="0.1805%" y="181" width="0.0120%" height="15" fill="rgb(232,36,49)" fg:x="15" fg:w="1"/><text x="0.4305%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.01%)</title><rect x="0.1805%" y="165" width="0.0120%" height="15" fill="rgb(209,103,24)" fg:x="15" fg:w="1"/><text x="0.4305%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.01%)</title><rect x="0.1805%" y="149" width="0.0120%" height="15" fill="rgb(229,88,8)" fg:x="15" fg:w="1"/><text x="0.4305%" y="159.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="0.1805%" y="133" width="0.0120%" height="15" fill="rgb(213,181,19)" fg:x="15" fg:w="1"/><text x="0.4305%" y="143.50"></text></g><g><title>alloc::fmt::format (8 samples, 0.10%)</title><rect x="0.1083%" y="293" width="0.0963%" height="15" fill="rgb(254,191,54)" fg:x="9" fg:w="8"/><text x="0.3583%" y="303.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.02%)</title><rect x="0.1805%" y="277" width="0.0241%" height="15" fill="rgb(241,83,37)" fg:x="15" fg:w="2"/><text x="0.4305%" y="287.50"></text></g><g><title>core::fmt::write (2 samples, 0.02%)</title><rect x="0.1805%" y="261" width="0.0241%" height="15" fill="rgb(233,36,39)" fg:x="15" fg:w="2"/><text x="0.4305%" y="271.50"></text></g><g><title>&lt;char as core::fmt::Display&gt;::fmt (1 samples, 0.01%)</title><rect x="0.1926%" y="245" width="0.0120%" height="15" fill="rgb(226,3,54)" fg:x="16" fg:w="1"/><text x="0.4426%" y="255.50"></text></g><g><title>rlox::lox::Lox::error (3 samples, 0.04%)</title><rect x="0.2046%" y="293" width="0.0361%" height="15" fill="rgb(245,192,40)" fg:x="17" fg:w="3"/><text x="0.4546%" y="303.50"></text></g><g><title>rlox::lox::Lox::report (3 samples, 0.04%)</title><rect x="0.2046%" y="277" width="0.0361%" height="15" fill="rgb(238,167,29)" fg:x="17" fg:w="3"/><text x="0.4546%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3 samples, 0.04%)</title><rect x="0.2046%" y="261" width="0.0361%" height="15" fill="rgb(232,182,51)" fg:x="17" fg:w="3"/><text x="0.4546%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 0.04%)</title><rect x="0.2046%" y="245" width="0.0361%" height="15" fill="rgb(231,60,39)" fg:x="17" fg:w="3"/><text x="0.4546%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 0.04%)</title><rect x="0.2046%" y="229" width="0.0361%" height="15" fill="rgb(208,69,12)" fg:x="17" fg:w="3"/><text x="0.4546%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="0.2046%" y="213" width="0.0361%" height="15" fill="rgb(235,93,37)" fg:x="17" fg:w="3"/><text x="0.4546%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.04%)</title><rect x="0.2046%" y="197" width="0.0361%" height="15" fill="rgb(213,116,39)" fg:x="17" fg:w="3"/><text x="0.4546%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.04%)</title><rect x="0.2046%" y="181" width="0.0361%" height="15" fill="rgb(222,207,29)" fg:x="17" fg:w="3"/><text x="0.4546%" y="191.50"></text></g><g><title>__GI___libc_free (3 samples, 0.04%)</title><rect x="0.2046%" y="165" width="0.0361%" height="15" fill="rgb(206,96,30)" fg:x="17" fg:w="3"/><text x="0.4546%" y="175.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="0.2287%" y="149" width="0.0120%" height="15" fill="rgb(218,138,4)" fg:x="19" fg:w="1"/><text x="0.4787%" y="159.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="0.2648%" y="261" width="0.0120%" height="15" fill="rgb(250,191,14)" fg:x="22" fg:w="1"/><text x="0.5148%" y="271.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.01%)</title><rect x="0.2648%" y="245" width="0.0120%" height="15" fill="rgb(239,60,40)" fg:x="22" fg:w="1"/><text x="0.5148%" y="255.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (6,370 samples, 76.66%)</title><rect x="0.3249%" y="245" width="76.6639%" height="15" fill="rgb(206,27,48)" fg:x="27" fg:w="6370"/><text x="0.5749%" y="255.50">&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::str::validations::next_code_point (6,370 samples, 76.66%)</title><rect x="0.3249%" y="229" width="76.6639%" height="15" fill="rgb(225,35,8)" fg:x="27" fg:w="6370"/><text x="0.5749%" y="239.50">core::str::validations::next_code_point</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,400 samples, 28.88%)</title><rect x="48.1045%" y="213" width="28.8843%" height="15" fill="rgb(250,213,24)" fg:x="3997" fg:w="2400"/><text x="48.3545%" y="223.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::tra..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1,153 samples, 13.88%)</title><rect x="63.1123%" y="197" width="13.8765%" height="15" fill="rgb(247,123,22)" fg:x="5244" fg:w="1153"/><text x="63.3623%" y="207.50">core::slice::iter::It..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (521 samples, 6.27%)</title><rect x="70.7185%" y="181" width="6.2703%" height="15" fill="rgb(231,138,38)" fg:x="5876" fg:w="521"/><text x="70.9685%" y="191.50">core::pt..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (16 samples, 0.19%)</title><rect x="76.9888%" y="245" width="0.1926%" height="15" fill="rgb(231,145,46)" fg:x="6397" fg:w="16"/><text x="77.2388%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (16 samples, 0.19%)</title><rect x="76.9888%" y="229" width="0.1926%" height="15" fill="rgb(251,118,11)" fg:x="6397" fg:w="16"/><text x="77.2388%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (16 samples, 0.19%)</title><rect x="76.9888%" y="213" width="0.1926%" height="15" fill="rgb(217,147,25)" fg:x="6397" fg:w="16"/><text x="77.2388%" y="223.50"></text></g><g><title>rlox::scanner::Scanner::advance (6,989 samples, 84.11%)</title><rect x="0.2407%" y="293" width="84.1136%" height="15" fill="rgb(247,81,37)" fg:x="20" fg:w="6989"/><text x="0.4907%" y="303.50">rlox::scanner::Scanner::advance</text></g><g><title>core::iter::traits::iterator::Iterator::nth (6,987 samples, 84.09%)</title><rect x="0.2648%" y="277" width="84.0895%" height="15" fill="rgb(209,12,38)" fg:x="22" fg:w="6987"/><text x="0.5148%" y="287.50">core::iter::traits::iterator::Iterator::nth</text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (6,986 samples, 84.08%)</title><rect x="0.2768%" y="261" width="84.0775%" height="15" fill="rgb(227,1,9)" fg:x="23" fg:w="6986"/><text x="0.5268%" y="271.50">core::iter::traits::iterator::Iterator::advance_by</text></g><g><title>core::option::Option&lt;T&gt;::ok_or (596 samples, 7.17%)</title><rect x="77.1814%" y="245" width="7.1729%" height="15" fill="rgb(248,47,43)" fg:x="6413" fg:w="596"/><text x="77.4314%" y="255.50">core::opti..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (428 samples, 5.15%)</title><rect x="84.3543%" y="245" width="5.1510%" height="15" fill="rgb(221,10,30)" fg:x="7009" fg:w="428"/><text x="84.6043%" y="255.50">&lt;core:..</text></g><g><title>core::str::validations::next_code_point (428 samples, 5.15%)</title><rect x="84.3543%" y="229" width="5.1510%" height="15" fill="rgb(210,229,1)" fg:x="7009" fg:w="428"/><text x="84.6043%" y="239.50">core::..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (160 samples, 1.93%)</title><rect x="87.5797%" y="213" width="1.9256%" height="15" fill="rgb(222,148,37)" fg:x="7277" fg:w="160"/><text x="87.8297%" y="223.50">&lt;..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (88 samples, 1.06%)</title><rect x="88.4463%" y="197" width="1.0591%" height="15" fill="rgb(234,67,33)" fg:x="7349" fg:w="88"/><text x="88.6963%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (42 samples, 0.51%)</title><rect x="88.9999%" y="181" width="0.5055%" height="15" fill="rgb(247,98,35)" fg:x="7395" fg:w="42"/><text x="89.2499%" y="191.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3 samples, 0.04%)</title><rect x="89.5054%" y="245" width="0.0361%" height="15" fill="rgb(247,138,52)" fg:x="7437" fg:w="3"/><text x="89.7554%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3 samples, 0.04%)</title><rect x="89.5054%" y="229" width="0.0361%" height="15" fill="rgb(213,79,30)" fg:x="7437" fg:w="3"/><text x="89.7554%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (3 samples, 0.04%)</title><rect x="89.5054%" y="213" width="0.0361%" height="15" fill="rgb(246,177,23)" fg:x="7437" fg:w="3"/><text x="89.7554%" y="223.50"></text></g><g><title>rlox::scanner::Scanner::match_next (467 samples, 5.62%)</title><rect x="84.3543%" y="293" width="5.6204%" height="15" fill="rgb(230,62,27)" fg:x="7009" fg:w="467"/><text x="84.6043%" y="303.50">rlox::s..</text></g><g><title>core::iter::traits::iterator::Iterator::nth (467 samples, 5.62%)</title><rect x="84.3543%" y="277" width="5.6204%" height="15" fill="rgb(216,154,8)" fg:x="7009" fg:w="467"/><text x="84.6043%" y="287.50">core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (467 samples, 5.62%)</title><rect x="84.3543%" y="261" width="5.6204%" height="15" fill="rgb(244,35,45)" fg:x="7009" fg:w="467"/><text x="84.6043%" y="271.50">core::i..</text></g><g><title>core::option::Option&lt;T&gt;::ok_or (36 samples, 0.43%)</title><rect x="89.5415%" y="245" width="0.4333%" height="15" fill="rgb(251,115,12)" fg:x="7440" fg:w="36"/><text x="89.7915%" y="255.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (750 samples, 9.03%)</title><rect x="89.9747%" y="245" width="9.0264%" height="15" fill="rgb(240,54,50)" fg:x="7476" fg:w="750"/><text x="90.2247%" y="255.50">&lt;core::str::i..</text></g><g><title>core::str::validations::next_code_point (750 samples, 9.03%)</title><rect x="89.9747%" y="229" width="9.0264%" height="15" fill="rgb(233,84,52)" fg:x="7476" fg:w="750"/><text x="90.2247%" y="239.50">core::str::va..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (287 samples, 3.45%)</title><rect x="95.5470%" y="213" width="3.4541%" height="15" fill="rgb(207,117,47)" fg:x="7939" fg:w="287"/><text x="95.7970%" y="223.50">&lt;co..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (126 samples, 1.52%)</title><rect x="97.4847%" y="197" width="1.5164%" height="15" fill="rgb(249,43,39)" fg:x="8100" fg:w="126"/><text x="97.7347%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (63 samples, 0.76%)</title><rect x="98.2429%" y="181" width="0.7582%" height="15" fill="rgb(209,38,44)" fg:x="8163" fg:w="63"/><text x="98.4929%" y="191.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.01%)</title><rect x="99.0011%" y="245" width="0.0120%" height="15" fill="rgb(236,212,23)" fg:x="8226" fg:w="1"/><text x="99.2511%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.01%)</title><rect x="99.0011%" y="229" width="0.0120%" height="15" fill="rgb(242,79,21)" fg:x="8226" fg:w="1"/><text x="99.2511%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.01%)</title><rect x="99.0011%" y="213" width="0.0120%" height="15" fill="rgb(211,96,35)" fg:x="8226" fg:w="1"/><text x="99.2511%" y="223.50"></text></g><g><title>rlox::scanner::Scanner::scan_token (8,292 samples, 99.80%)</title><rect x="0.1083%" y="309" width="99.7954%" height="15" fill="rgb(253,215,40)" fg:x="9" fg:w="8292"/><text x="0.3583%" y="319.50">rlox::scanner::Scanner::scan_token</text></g><g><title>rlox::scanner::Scanner::peek (825 samples, 9.93%)</title><rect x="89.9747%" y="293" width="9.9290%" height="15" fill="rgb(211,81,21)" fg:x="7476" fg:w="825"/><text x="90.2247%" y="303.50">rlox::scanner:..</text></g><g><title>core::iter::traits::iterator::Iterator::nth (825 samples, 9.93%)</title><rect x="89.9747%" y="277" width="9.9290%" height="15" fill="rgb(208,190,38)" fg:x="7476" fg:w="825"/><text x="90.2247%" y="287.50">core::iter::tr..</text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (825 samples, 9.93%)</title><rect x="89.9747%" y="261" width="9.9290%" height="15" fill="rgb(235,213,38)" fg:x="7476" fg:w="825"/><text x="90.2247%" y="271.50">core::iter::tr..</text></g><g><title>core::option::Option&lt;T&gt;::ok_or (74 samples, 0.89%)</title><rect x="99.0131%" y="245" width="0.8906%" height="15" fill="rgb(237,122,38)" fg:x="8227" fg:w="74"/><text x="99.2631%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::Range&lt;usize&gt;&gt;&gt;::index (1 samples, 0.01%)</title><rect x="99.9037%" y="277" width="0.0120%" height="15" fill="rgb(244,218,35)" fg:x="8301" fg:w="1"/><text x="100.1537%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (1 samples, 0.01%)</title><rect x="99.9037%" y="261" width="0.0120%" height="15" fill="rgb(240,68,47)" fg:x="8301" fg:w="1"/><text x="100.1537%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.01%)</title><rect x="99.9037%" y="245" width="0.0120%" height="15" fill="rgb(210,16,53)" fg:x="8301" fg:w="1"/><text x="100.1537%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.01%)</title><rect x="99.9037%" y="229" width="0.0120%" height="15" fill="rgb(235,124,12)" fg:x="8301" fg:w="1"/><text x="100.1537%" y="239.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.05%)</title><rect x="99.9158%" y="53" width="0.0481%" height="15" fill="rgb(224,169,11)" fg:x="8302" fg:w="4"/><text x="100.1658%" y="63.50"></text></g><g><title>_int_malloc (1 samples, 0.01%)</title><rect x="99.9519%" y="37" width="0.0120%" height="15" fill="rgb(250,166,2)" fg:x="8305" fg:w="1"/><text x="100.2019%" y="47.50"></text></g><g><title>_start (8,298 samples, 99.87%)</title><rect x="0.1083%" y="613" width="99.8676%" height="15" fill="rgb(242,216,29)" fg:x="9" fg:w="8298"/><text x="0.3583%" y="623.50">_start</text></g><g><title>__libc_start_main (8,298 samples, 99.87%)</title><rect x="0.1083%" y="597" width="99.8676%" height="15" fill="rgb(230,116,27)" fg:x="9" fg:w="8298"/><text x="0.3583%" y="607.50">__libc_start_main</text></g><g><title>main (8,298 samples, 99.87%)</title><rect x="0.1083%" y="581" width="99.8676%" height="15" fill="rgb(228,99,48)" fg:x="9" fg:w="8298"/><text x="0.3583%" y="591.50">main</text></g><g><title>std::rt::lang_start_internal (8,298 samples, 99.87%)</title><rect x="0.1083%" y="565" width="99.8676%" height="15" fill="rgb(253,11,6)" fg:x="9" fg:w="8298"/><text x="0.3583%" y="575.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (8,298 samples, 99.87%)</title><rect x="0.1083%" y="549" width="99.8676%" height="15" fill="rgb(247,143,39)" fg:x="9" fg:w="8298"/><text x="0.3583%" y="559.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (8,298 samples, 99.87%)</title><rect x="0.1083%" y="533" width="99.8676%" height="15" fill="rgb(236,97,10)" fg:x="9" fg:w="8298"/><text x="0.3583%" y="543.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (8,298 samples, 99.87%)</title><rect x="0.1083%" y="517" width="99.8676%" height="15" fill="rgb(233,208,19)" fg:x="9" fg:w="8298"/><text x="0.3583%" y="527.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (8,298 samples, 99.87%)</title><rect x="0.1083%" y="501" width="99.8676%" height="15" fill="rgb(216,164,2)" fg:x="9" fg:w="8298"/><text x="0.3583%" y="511.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (8,298 samples, 99.87%)</title><rect x="0.1083%" y="485" width="99.8676%" height="15" fill="rgb(220,129,5)" fg:x="9" fg:w="8298"/><text x="0.3583%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (8,298 samples, 99.87%)</title><rect x="0.1083%" y="469" width="99.8676%" height="15" fill="rgb(242,17,10)" fg:x="9" fg:w="8298"/><text x="0.3583%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (8,298 samples, 99.87%)</title><rect x="0.1083%" y="453" width="99.8676%" height="15" fill="rgb(242,107,0)" fg:x="9" fg:w="8298"/><text x="0.3583%" y="463.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (8,298 samples, 99.87%)</title><rect x="0.1083%" y="437" width="99.8676%" height="15" fill="rgb(251,28,31)" fg:x="9" fg:w="8298"/><text x="0.3583%" y="447.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (8,298 samples, 99.87%)</title><rect x="0.1083%" y="421" width="99.8676%" height="15" fill="rgb(233,223,10)" fg:x="9" fg:w="8298"/><text x="0.3583%" y="431.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8,298 samples, 99.87%)</title><rect x="0.1083%" y="405" width="99.8676%" height="15" fill="rgb(215,21,27)" fg:x="9" fg:w="8298"/><text x="0.3583%" y="415.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (8,298 samples, 99.87%)</title><rect x="0.1083%" y="389" width="99.8676%" height="15" fill="rgb(232,23,21)" fg:x="9" fg:w="8298"/><text x="0.3583%" y="399.50">core::ops::function::FnOnce::call_once</text></g><g><title>rlox::main (8,298 samples, 99.87%)</title><rect x="0.1083%" y="373" width="99.8676%" height="15" fill="rgb(244,5,23)" fg:x="9" fg:w="8298"/><text x="0.3583%" y="383.50">rlox::main</text></g><g><title>rlox::lox::Lox::run_file (8,298 samples, 99.87%)</title><rect x="0.1083%" y="357" width="99.8676%" height="15" fill="rgb(226,81,46)" fg:x="9" fg:w="8298"/><text x="0.3583%" y="367.50">rlox::lox::Lox::run_file</text></g><g><title>rlox::lox::Lox::run (8,298 samples, 99.87%)</title><rect x="0.1083%" y="341" width="99.8676%" height="15" fill="rgb(247,70,30)" fg:x="9" fg:w="8298"/><text x="0.3583%" y="351.50">rlox::lox::Lox::run</text></g><g><title>rlox::scanner::Scanner::scan_tokens (8,298 samples, 99.87%)</title><rect x="0.1083%" y="325" width="99.8676%" height="15" fill="rgb(212,68,19)" fg:x="9" fg:w="8298"/><text x="0.3583%" y="335.50">rlox::scanner::Scanner::scan_tokens</text></g><g><title>rlox::scanner::Scanner::scan_tokens (6 samples, 0.07%)</title><rect x="99.9037%" y="309" width="0.0722%" height="15" fill="rgb(240,187,13)" fg:x="8301" fg:w="6"/><text x="100.1537%" y="319.50"></text></g><g><title>rlox::scanner::Scanner::add_token (6 samples, 0.07%)</title><rect x="99.9037%" y="293" width="0.0722%" height="15" fill="rgb(223,113,26)" fg:x="8301" fg:w="6"/><text x="100.1537%" y="303.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (5 samples, 0.06%)</title><rect x="99.9158%" y="277" width="0.0602%" height="15" fill="rgb(206,192,2)" fg:x="8302" fg:w="5"/><text x="100.1658%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (5 samples, 0.06%)</title><rect x="99.9158%" y="261" width="0.0602%" height="15" fill="rgb(241,108,4)" fg:x="8302" fg:w="5"/><text x="100.1658%" y="271.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (5 samples, 0.06%)</title><rect x="99.9158%" y="245" width="0.0602%" height="15" fill="rgb(247,173,49)" fg:x="8302" fg:w="5"/><text x="100.1658%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (5 samples, 0.06%)</title><rect x="99.9158%" y="229" width="0.0602%" height="15" fill="rgb(224,114,35)" fg:x="8302" fg:w="5"/><text x="100.1658%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (5 samples, 0.06%)</title><rect x="99.9158%" y="213" width="0.0602%" height="15" fill="rgb(245,159,27)" fg:x="8302" fg:w="5"/><text x="100.1658%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.06%)</title><rect x="99.9158%" y="197" width="0.0602%" height="15" fill="rgb(245,172,44)" fg:x="8302" fg:w="5"/><text x="100.1658%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.06%)</title><rect x="99.9158%" y="181" width="0.0602%" height="15" fill="rgb(236,23,11)" fg:x="8302" fg:w="5"/><text x="100.1658%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.06%)</title><rect x="99.9158%" y="165" width="0.0602%" height="15" fill="rgb(205,117,38)" fg:x="8302" fg:w="5"/><text x="100.1658%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.06%)</title><rect x="99.9158%" y="149" width="0.0602%" height="15" fill="rgb(237,72,25)" fg:x="8302" fg:w="5"/><text x="100.1658%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.06%)</title><rect x="99.9158%" y="133" width="0.0602%" height="15" fill="rgb(244,70,9)" fg:x="8302" fg:w="5"/><text x="100.1658%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.06%)</title><rect x="99.9158%" y="117" width="0.0602%" height="15" fill="rgb(217,125,39)" fg:x="8302" fg:w="5"/><text x="100.1658%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.06%)</title><rect x="99.9158%" y="101" width="0.0602%" height="15" fill="rgb(235,36,10)" fg:x="8302" fg:w="5"/><text x="100.1658%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.06%)</title><rect x="99.9158%" y="85" width="0.0602%" height="15" fill="rgb(251,123,47)" fg:x="8302" fg:w="5"/><text x="100.1658%" y="95.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.06%)</title><rect x="99.9158%" y="69" width="0.0602%" height="15" fill="rgb(221,13,13)" fg:x="8302" fg:w="5"/><text x="100.1658%" y="79.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="99.9639%" y="53" width="0.0120%" height="15" fill="rgb(238,131,9)" fg:x="8306" fg:w="1"/><text x="100.2139%" y="63.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="99.9639%" y="37" width="0.0120%" height="15" fill="rgb(211,50,8)" fg:x="8306" fg:w="1"/><text x="100.2139%" y="47.50"></text></g><g><title>all (8,309 samples, 100%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(245,182,24)" fg:x="0" fg:w="8309"/><text x="0.2500%" y="655.50"></text></g><g><title>rlox (8,309 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(242,14,37)" fg:x="0" fg:w="8309"/><text x="0.2500%" y="639.50">rlox</text></g><g><title>alloc::fmt::format (2 samples, 0.02%)</title><rect x="99.9759%" y="613" width="0.0241%" height="15" fill="rgb(246,228,12)" fg:x="8307" fg:w="2"/><text x="100.2259%" y="623.50"></text></g></svg></svg>