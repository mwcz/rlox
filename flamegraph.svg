<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="694" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="677.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="677.00"> </text><svg id="frames" x="10" width="1180" total_samples="10798"><g><title>.annobin_lto (6 samples, 0.06%)</title><rect x="0.0185%" y="613" width="0.0556%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="6"/><text x="0.2685%" y="623.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.02%)</title><rect x="0.0741%" y="613" width="0.0185%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="2"/><text x="0.3241%" y="623.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3 samples, 0.03%)</title><rect x="0.0926%" y="613" width="0.0278%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="3"/><text x="0.3426%" y="623.50"></text></g><g><title>__dso_handle (3 samples, 0.03%)</title><rect x="0.1297%" y="613" width="0.0278%" height="15" fill="rgb(248,212,6)" fg:x="14" fg:w="3"/><text x="0.3797%" y="623.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (3,754 samples, 34.77%)</title><rect x="0.1852%" y="245" width="34.7657%" height="15" fill="rgb(208,68,35)" fg:x="20" fg:w="3754"/><text x="0.4352%" y="255.50">&lt;core::str::iter::Chars as core::iter::traits::iterator:..</text></g><g><title>core::str::validations::next_code_point (3,754 samples, 34.77%)</title><rect x="0.1852%" y="229" width="34.7657%" height="15" fill="rgb(232,128,0)" fg:x="20" fg:w="3754"/><text x="0.4352%" y="239.50">core::str::validations::next_code_point</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,115 samples, 10.33%)</title><rect x="24.6249%" y="213" width="10.3260%" height="15" fill="rgb(207,160,47)" fg:x="2659" fg:w="1115"/><text x="24.8749%" y="223.50">&lt;core::slice::i..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (731 samples, 6.77%)</title><rect x="28.1811%" y="197" width="6.7698%" height="15" fill="rgb(228,23,34)" fg:x="3043" fg:w="731"/><text x="28.4311%" y="207.50">core::sli..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (488 samples, 4.52%)</title><rect x="30.4316%" y="181" width="4.5194%" height="15" fill="rgb(218,30,26)" fg:x="3286" fg:w="488"/><text x="30.6816%" y="191.50">core:..</text></g><g><title>rlox::scanner::Scanner::advance (4,204 samples, 38.93%)</title><rect x="0.1852%" y="293" width="38.9331%" height="15" fill="rgb(220,122,19)" fg:x="20" fg:w="4204"/><text x="0.4352%" y="303.50">rlox::scanner::Scanner::advance</text></g><g><title>core::iter::traits::iterator::Iterator::nth (4,204 samples, 38.93%)</title><rect x="0.1852%" y="277" width="38.9331%" height="15" fill="rgb(250,228,42)" fg:x="20" fg:w="4204"/><text x="0.4352%" y="287.50">core::iter::traits::iterator::Iterator::nth</text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (4,204 samples, 38.93%)</title><rect x="0.1852%" y="261" width="38.9331%" height="15" fill="rgb(240,193,28)" fg:x="20" fg:w="4204"/><text x="0.4352%" y="271.50">core::iter::traits::iterator::Iterator::advance_by</text></g><g><title>core::option::Option&lt;T&gt;::ok_or (449 samples, 4.16%)</title><rect x="34.9602%" y="245" width="4.1582%" height="15" fill="rgb(216,20,37)" fg:x="3775" fg:w="449"/><text x="35.2102%" y="255.50">core:..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1,499 samples, 13.88%)</title><rect x="39.1369%" y="229" width="13.8822%" height="15" fill="rgb(206,188,39)" fg:x="4226" fg:w="1499"/><text x="39.3869%" y="239.50">&lt;core::str::iter::Cha..</text></g><g><title>core::str::validations::next_code_point (1,499 samples, 13.88%)</title><rect x="39.1369%" y="213" width="13.8822%" height="15" fill="rgb(217,207,13)" fg:x="4226" fg:w="1499"/><text x="39.3869%" y="223.50">core::str::validation..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (441 samples, 4.08%)</title><rect x="48.9350%" y="197" width="4.0841%" height="15" fill="rgb(231,73,38)" fg:x="5284" fg:w="441"/><text x="49.1850%" y="207.50">&lt;cor..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (301 samples, 2.79%)</title><rect x="50.2315%" y="181" width="2.7876%" height="15" fill="rgb(225,20,46)" fg:x="5424" fg:w="301"/><text x="50.4815%" y="191.50">co..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (201 samples, 1.86%)</title><rect x="51.1576%" y="165" width="1.8615%" height="15" fill="rgb(210,31,41)" fg:x="5524" fg:w="201"/><text x="51.4076%" y="175.50">c..</text></g><g><title>rlox::scanner::Scanner::advance (1,714 samples, 15.87%)</title><rect x="39.1369%" y="277" width="15.8733%" height="15" fill="rgb(221,200,47)" fg:x="4226" fg:w="1714"/><text x="39.3869%" y="287.50">rlox::scanner::Scanner::..</text></g><g><title>core::iter::traits::iterator::Iterator::nth (1,714 samples, 15.87%)</title><rect x="39.1369%" y="261" width="15.8733%" height="15" fill="rgb(226,26,5)" fg:x="4226" fg:w="1714"/><text x="39.3869%" y="271.50">core::iter::traits::iter..</text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (1,714 samples, 15.87%)</title><rect x="39.1369%" y="245" width="15.8733%" height="15" fill="rgb(249,33,26)" fg:x="4226" fg:w="1714"/><text x="39.3869%" y="255.50">core::iter::traits::iter..</text></g><g><title>core::option::Option&lt;T&gt;::ok_or (214 samples, 1.98%)</title><rect x="53.0283%" y="229" width="1.9818%" height="15" fill="rgb(235,183,28)" fg:x="5726" fg:w="214"/><text x="53.2783%" y="239.50">c..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1,888 samples, 17.48%)</title><rect x="55.0102%" y="229" width="17.4847%" height="15" fill="rgb(221,5,38)" fg:x="5940" fg:w="1888"/><text x="55.2602%" y="239.50">&lt;core::str::iter::Chars as ..</text></g><g><title>core::str::validations::next_code_point (1,888 samples, 17.48%)</title><rect x="55.0102%" y="213" width="17.4847%" height="15" fill="rgb(247,18,42)" fg:x="5940" fg:w="1888"/><text x="55.2602%" y="223.50">core::str::validations::nex..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (571 samples, 5.29%)</title><rect x="67.2069%" y="197" width="5.2880%" height="15" fill="rgb(241,131,45)" fg:x="7257" fg:w="571"/><text x="67.4569%" y="207.50">&lt;core:..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (377 samples, 3.49%)</title><rect x="69.0035%" y="181" width="3.4914%" height="15" fill="rgb(249,31,29)" fg:x="7451" fg:w="377"/><text x="69.2535%" y="191.50">cor..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (251 samples, 2.32%)</title><rect x="70.1704%" y="165" width="2.3245%" height="15" fill="rgb(225,111,53)" fg:x="7577" fg:w="251"/><text x="70.4204%" y="175.50">c..</text></g><g><title>rlox::scanner::Scanner::peek (2,138 samples, 19.80%)</title><rect x="55.0102%" y="277" width="19.8000%" height="15" fill="rgb(238,160,17)" fg:x="5940" fg:w="2138"/><text x="55.2602%" y="287.50">rlox::scanner::Scanner::peek</text></g><g><title>core::iter::traits::iterator::Iterator::nth (2,138 samples, 19.80%)</title><rect x="55.0102%" y="261" width="19.8000%" height="15" fill="rgb(214,148,48)" fg:x="5940" fg:w="2138"/><text x="55.2602%" y="271.50">core::iter::traits::iterator::I..</text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (2,138 samples, 19.80%)</title><rect x="55.0102%" y="245" width="19.8000%" height="15" fill="rgb(232,36,49)" fg:x="5940" fg:w="2138"/><text x="55.2602%" y="255.50">core::iter::traits::iterator::I..</text></g><g><title>core::option::Option&lt;T&gt;::ok_or (250 samples, 2.32%)</title><rect x="72.4949%" y="229" width="2.3152%" height="15" fill="rgb(209,103,24)" fg:x="7828" fg:w="250"/><text x="72.7449%" y="239.50">c..</text></g><g><title>rlox::scanner::Scanner::identifier (3,855 samples, 35.70%)</title><rect x="39.1184%" y="293" width="35.7011%" height="15" fill="rgb(229,88,8)" fg:x="4224" fg:w="3855"/><text x="39.3684%" y="303.50">rlox::scanner::Scanner::identifier</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (323 samples, 2.99%)</title><rect x="74.8194%" y="245" width="2.9913%" height="15" fill="rgb(213,181,19)" fg:x="8079" fg:w="323"/><text x="75.0694%" y="255.50">&lt;co..</text></g><g><title>core::str::validations::next_code_point (323 samples, 2.99%)</title><rect x="74.8194%" y="229" width="2.9913%" height="15" fill="rgb(254,191,54)" fg:x="8079" fg:w="323"/><text x="75.0694%" y="239.50">cor..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (101 samples, 0.94%)</title><rect x="76.8753%" y="213" width="0.9354%" height="15" fill="rgb(241,83,37)" fg:x="8301" fg:w="101"/><text x="77.1253%" y="223.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (64 samples, 0.59%)</title><rect x="77.2180%" y="197" width="0.5927%" height="15" fill="rgb(233,36,39)" fg:x="8338" fg:w="64"/><text x="77.4680%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (43 samples, 0.40%)</title><rect x="77.4125%" y="181" width="0.3982%" height="15" fill="rgb(226,3,54)" fg:x="8359" fg:w="43"/><text x="77.6625%" y="191.50"></text></g><g><title>rlox::scanner::Scanner::match_next (362 samples, 3.35%)</title><rect x="74.8194%" y="293" width="3.3525%" height="15" fill="rgb(245,192,40)" fg:x="8079" fg:w="362"/><text x="75.0694%" y="303.50">rlo..</text></g><g><title>core::iter::traits::iterator::Iterator::nth (362 samples, 3.35%)</title><rect x="74.8194%" y="277" width="3.3525%" height="15" fill="rgb(238,167,29)" fg:x="8079" fg:w="362"/><text x="75.0694%" y="287.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (362 samples, 3.35%)</title><rect x="74.8194%" y="261" width="3.3525%" height="15" fill="rgb(232,182,51)" fg:x="8079" fg:w="362"/><text x="75.0694%" y="271.50">cor..</text></g><g><title>core::option::Option&lt;T&gt;::ok_or (39 samples, 0.36%)</title><rect x="77.8107%" y="245" width="0.3612%" height="15" fill="rgb(231,60,39)" fg:x="8402" fg:w="39"/><text x="78.0607%" y="255.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (681 samples, 6.31%)</title><rect x="78.1719%" y="245" width="6.3067%" height="15" fill="rgb(208,69,12)" fg:x="8441" fg:w="681"/><text x="78.4219%" y="255.50">&lt;core::s..</text></g><g><title>core::str::validations::next_code_point (681 samples, 6.31%)</title><rect x="78.1719%" y="229" width="6.3067%" height="15" fill="rgb(235,93,37)" fg:x="8441" fg:w="681"/><text x="78.4219%" y="239.50">core::st..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (200 samples, 1.85%)</title><rect x="82.6264%" y="213" width="1.8522%" height="15" fill="rgb(213,116,39)" fg:x="8922" fg:w="200"/><text x="82.8764%" y="223.50">&lt;..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (126 samples, 1.17%)</title><rect x="83.3117%" y="197" width="1.1669%" height="15" fill="rgb(222,207,29)" fg:x="8996" fg:w="126"/><text x="83.5617%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (84 samples, 0.78%)</title><rect x="83.7007%" y="181" width="0.7779%" height="15" fill="rgb(206,96,30)" fg:x="9038" fg:w="84"/><text x="83.9507%" y="191.50"></text></g><g><title>rlox::scanner::Scanner::peek (754 samples, 6.98%)</title><rect x="78.1719%" y="293" width="6.9828%" height="15" fill="rgb(218,138,4)" fg:x="8441" fg:w="754"/><text x="78.4219%" y="303.50">rlox::sca..</text></g><g><title>core::iter::traits::iterator::Iterator::nth (754 samples, 6.98%)</title><rect x="78.1719%" y="277" width="6.9828%" height="15" fill="rgb(250,191,14)" fg:x="8441" fg:w="754"/><text x="78.4219%" y="287.50">core::ite..</text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (754 samples, 6.98%)</title><rect x="78.1719%" y="261" width="6.9828%" height="15" fill="rgb(239,60,40)" fg:x="8441" fg:w="754"/><text x="78.4219%" y="271.50">core::ite..</text></g><g><title>core::option::Option&lt;T&gt;::ok_or (73 samples, 0.68%)</title><rect x="84.4786%" y="245" width="0.6761%" height="15" fill="rgb(206,27,48)" fg:x="9122" fg:w="73"/><text x="84.7286%" y="255.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (510 samples, 4.72%)</title><rect x="85.1547%" y="229" width="4.7231%" height="15" fill="rgb(225,35,8)" fg:x="9195" fg:w="510"/><text x="85.4047%" y="239.50">&lt;core:..</text></g><g><title>core::str::validations::next_code_point (510 samples, 4.72%)</title><rect x="85.1547%" y="213" width="4.7231%" height="15" fill="rgb(250,213,24)" fg:x="9195" fg:w="510"/><text x="85.4047%" y="223.50">core::..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (140 samples, 1.30%)</title><rect x="88.5812%" y="197" width="1.2965%" height="15" fill="rgb(247,123,22)" fg:x="9565" fg:w="140"/><text x="88.8312%" y="207.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (93 samples, 0.86%)</title><rect x="89.0165%" y="181" width="0.8613%" height="15" fill="rgb(231,138,38)" fg:x="9612" fg:w="93"/><text x="89.2665%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (72 samples, 0.67%)</title><rect x="89.2110%" y="165" width="0.6668%" height="15" fill="rgb(231,145,46)" fg:x="9633" fg:w="72"/><text x="89.4610%" y="175.50"></text></g><g><title>rlox::scanner::Scanner::advance (568 samples, 5.26%)</title><rect x="85.1547%" y="277" width="5.2602%" height="15" fill="rgb(251,118,11)" fg:x="9195" fg:w="568"/><text x="85.4047%" y="287.50">rlox::..</text></g><g><title>core::iter::traits::iterator::Iterator::nth (568 samples, 5.26%)</title><rect x="85.1547%" y="261" width="5.2602%" height="15" fill="rgb(217,147,25)" fg:x="9195" fg:w="568"/><text x="85.4047%" y="271.50">core::..</text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (568 samples, 5.26%)</title><rect x="85.1547%" y="245" width="5.2602%" height="15" fill="rgb(247,81,37)" fg:x="9195" fg:w="568"/><text x="85.4047%" y="255.50">core::..</text></g><g><title>core::option::Option&lt;T&gt;::ok_or (58 samples, 0.54%)</title><rect x="89.8778%" y="229" width="0.5371%" height="15" fill="rgb(209,12,38)" fg:x="9705" fg:w="58"/><text x="90.1278%" y="239.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (875 samples, 8.10%)</title><rect x="90.4149%" y="229" width="8.1034%" height="15" fill="rgb(227,1,9)" fg:x="9763" fg:w="875"/><text x="90.6649%" y="239.50">&lt;core::str:..</text></g><g><title>core::str::validations::next_code_point (875 samples, 8.10%)</title><rect x="90.4149%" y="213" width="8.1034%" height="15" fill="rgb(248,47,43)" fg:x="9763" fg:w="875"/><text x="90.6649%" y="223.50">core::str::..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (241 samples, 2.23%)</title><rect x="96.2863%" y="197" width="2.2319%" height="15" fill="rgb(221,10,30)" fg:x="10397" fg:w="241"/><text x="96.5363%" y="207.50">&lt;..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (160 samples, 1.48%)</title><rect x="97.0365%" y="181" width="1.4818%" height="15" fill="rgb(210,229,1)" fg:x="10478" fg:w="160"/><text x="97.2865%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (112 samples, 1.04%)</title><rect x="97.4810%" y="165" width="1.0372%" height="15" fill="rgb(222,148,37)" fg:x="10526" fg:w="112"/><text x="97.7310%" y="175.50"></text></g><g><title>rlox::scanner::Scanner::scan_token (10,733 samples, 99.40%)</title><rect x="0.1760%" y="309" width="99.3980%" height="15" fill="rgb(234,67,33)" fg:x="19" fg:w="10733"/><text x="0.4260%" y="319.50">rlox::scanner::Scanner::scan_token</text></g><g><title>rlox::scanner::Scanner::string (1,557 samples, 14.42%)</title><rect x="85.1547%" y="293" width="14.4193%" height="15" fill="rgb(247,98,35)" fg:x="9195" fg:w="1557"/><text x="85.4047%" y="303.50">rlox::scanner::Scanner..</text></g><g><title>rlox::scanner::Scanner::peek (989 samples, 9.16%)</title><rect x="90.4149%" y="277" width="9.1591%" height="15" fill="rgb(247,138,52)" fg:x="9763" fg:w="989"/><text x="90.6649%" y="287.50">rlox::scanner..</text></g><g><title>core::iter::traits::iterator::Iterator::nth (989 samples, 9.16%)</title><rect x="90.4149%" y="261" width="9.1591%" height="15" fill="rgb(213,79,30)" fg:x="9763" fg:w="989"/><text x="90.6649%" y="271.50">core::iter::t..</text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (989 samples, 9.16%)</title><rect x="90.4149%" y="245" width="9.1591%" height="15" fill="rgb(246,177,23)" fg:x="9763" fg:w="989"/><text x="90.6649%" y="255.50">core::iter::t..</text></g><g><title>core::option::Option&lt;T&gt;::ok_or (113 samples, 1.05%)</title><rect x="98.5275%" y="229" width="1.0465%" height="15" fill="rgb(230,62,27)" fg:x="10639" fg:w="113"/><text x="98.7775%" y="239.50"></text></g><g><title>rlox::scanner::Scanner::scan_tokens (10,735 samples, 99.42%)</title><rect x="0.1667%" y="325" width="99.4166%" height="15" fill="rgb(216,154,8)" fg:x="18" fg:w="10735"/><text x="0.4167%" y="335.50">rlox::scanner::Scanner::scan_tokens</text></g><g><title>&lt;rlox::token_type::TokenType as core::fmt::Debug&gt;::fmt (4 samples, 0.04%)</title><rect x="99.6018%" y="133" width="0.0370%" height="15" fill="rgb(244,35,45)" fg:x="10755" fg:w="4"/><text x="99.8518%" y="143.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (3 samples, 0.03%)</title><rect x="99.6110%" y="117" width="0.0278%" height="15" fill="rgb(251,115,12)" fg:x="10756" fg:w="3"/><text x="99.8610%" y="127.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (3 samples, 0.03%)</title><rect x="99.6110%" y="101" width="0.0278%" height="15" fill="rgb(240,54,50)" fg:x="10756" fg:w="3"/><text x="99.8610%" y="111.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (3 samples, 0.03%)</title><rect x="99.6110%" y="85" width="0.0278%" height="15" fill="rgb(233,84,52)" fg:x="10756" fg:w="3"/><text x="99.8610%" y="95.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (3 samples, 0.03%)</title><rect x="99.6110%" y="69" width="0.0278%" height="15" fill="rgb(207,117,47)" fg:x="10756" fg:w="3"/><text x="99.8610%" y="79.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::escape_debug_ext (2 samples, 0.02%)</title><rect x="99.6203%" y="53" width="0.0185%" height="15" fill="rgb(249,43,39)" fg:x="10757" fg:w="2"/><text x="99.8703%" y="63.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (6 samples, 0.06%)</title><rect x="99.5925%" y="149" width="0.0556%" height="15" fill="rgb(209,38,44)" fg:x="10754" fg:w="6"/><text x="99.8425%" y="159.50"></text></g><g><title>&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (2 samples, 0.02%)</title><rect x="99.6481%" y="133" width="0.0185%" height="15" fill="rgb(236,212,23)" fg:x="10760" fg:w="2"/><text x="99.8981%" y="143.50"></text></g><g><title>core::fmt::Write::write_char (2 samples, 0.02%)</title><rect x="99.6481%" y="117" width="0.0185%" height="15" fill="rgb(242,79,21)" fg:x="10760" fg:w="2"/><text x="99.8981%" y="127.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.02%)</title><rect x="99.6481%" y="101" width="0.0185%" height="15" fill="rgb(211,96,35)" fg:x="10760" fg:w="2"/><text x="99.8981%" y="111.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 0.02%)</title><rect x="99.6481%" y="85" width="0.0185%" height="15" fill="rgb(253,215,40)" fg:x="10760" fg:w="2"/><text x="99.8981%" y="95.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="99.6666%" y="133" width="0.0185%" height="15" fill="rgb(211,81,21)" fg:x="10762" fg:w="2"/><text x="99.9166%" y="143.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="99.6666%" y="117" width="0.0185%" height="15" fill="rgb(208,190,38)" fg:x="10762" fg:w="2"/><text x="99.9166%" y="127.50"></text></g><g><title>core::str::validations::next_code_point (2 samples, 0.02%)</title><rect x="99.6666%" y="101" width="0.0185%" height="15" fill="rgb(235,213,38)" fg:x="10762" fg:w="2"/><text x="99.9166%" y="111.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (7 samples, 0.06%)</title><rect x="99.6481%" y="149" width="0.0648%" height="15" fill="rgb(237,122,38)" fg:x="10760" fg:w="7"/><text x="99.8981%" y="159.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::escape_debug_ext (2 samples, 0.02%)</title><rect x="99.6944%" y="133" width="0.0185%" height="15" fill="rgb(244,218,35)" fg:x="10765" fg:w="2"/><text x="99.9444%" y="143.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_grapheme_extended (2 samples, 0.02%)</title><rect x="99.6944%" y="117" width="0.0185%" height="15" fill="rgb(240,68,47)" fg:x="10765" fg:w="2"/><text x="99.9444%" y="127.50"></text></g><g><title>core::unicode::unicode_data::grapheme_extend::lookup (2 samples, 0.02%)</title><rect x="99.6944%" y="101" width="0.0185%" height="15" fill="rgb(210,16,53)" fg:x="10765" fg:w="2"/><text x="99.9444%" y="111.50"></text></g><g><title>core::unicode::unicode_data::skip_search (2 samples, 0.02%)</title><rect x="99.6944%" y="85" width="0.0185%" height="15" fill="rgb(235,124,12)" fg:x="10765" fg:w="2"/><text x="99.9444%" y="95.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key (2 samples, 0.02%)</title><rect x="99.6944%" y="69" width="0.0185%" height="15" fill="rgb(224,169,11)" fg:x="10765" fg:w="2"/><text x="99.9444%" y="79.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (2 samples, 0.02%)</title><rect x="99.6944%" y="53" width="0.0185%" height="15" fill="rgb(250,166,2)" fg:x="10765" fg:w="2"/><text x="99.9444%" y="63.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (2 samples, 0.02%)</title><rect x="99.7129%" y="85" width="0.0185%" height="15" fill="rgb(242,216,29)" fg:x="10767" fg:w="2"/><text x="99.9629%" y="95.50"></text></g><g><title>std::sys_common::memchr::memrchr (2 samples, 0.02%)</title><rect x="99.7129%" y="69" width="0.0185%" height="15" fill="rgb(230,116,27)" fg:x="10767" fg:w="2"/><text x="99.9629%" y="79.50"></text></g><g><title>std::sys::unix::memchr::memrchr (2 samples, 0.02%)</title><rect x="99.7129%" y="53" width="0.0185%" height="15" fill="rgb(228,99,48)" fg:x="10767" fg:w="2"/><text x="99.9629%" y="63.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (2 samples, 0.02%)</title><rect x="99.7129%" y="37" width="0.0185%" height="15" fill="rgb(253,11,6)" fg:x="10767" fg:w="2"/><text x="99.9629%" y="47.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (3 samples, 0.03%)</title><rect x="99.7129%" y="101" width="0.0278%" height="15" fill="rgb(247,143,39)" fg:x="10767" fg:w="3"/><text x="99.9629%" y="111.50"></text></g><g><title>core::fmt::Formatter::write_str (4 samples, 0.04%)</title><rect x="99.7129%" y="149" width="0.0370%" height="15" fill="rgb(236,97,10)" fg:x="10767" fg:w="4"/><text x="99.9629%" y="159.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 0.04%)</title><rect x="99.7129%" y="133" width="0.0370%" height="15" fill="rgb(233,208,19)" fg:x="10767" fg:w="4"/><text x="99.9629%" y="143.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (4 samples, 0.04%)</title><rect x="99.7129%" y="117" width="0.0370%" height="15" fill="rgb(216,164,2)" fg:x="10767" fg:w="4"/><text x="99.9629%" y="127.50"></text></g><g><title>core::fmt::Write::write_char (2 samples, 0.02%)</title><rect x="99.7500%" y="149" width="0.0185%" height="15" fill="rgb(220,129,5)" fg:x="10771" fg:w="2"/><text x="100.0000%" y="159.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.02%)</title><rect x="99.7500%" y="133" width="0.0185%" height="15" fill="rgb(242,17,10)" fg:x="10771" fg:w="2"/><text x="100.0000%" y="143.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 0.02%)</title><rect x="99.7500%" y="117" width="0.0185%" height="15" fill="rgb(242,107,0)" fg:x="10771" fg:w="2"/><text x="100.0000%" y="127.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (2 samples, 0.02%)</title><rect x="99.7500%" y="101" width="0.0185%" height="15" fill="rgb(251,28,31)" fg:x="10771" fg:w="2"/><text x="100.0000%" y="111.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (21 samples, 0.19%)</title><rect x="99.5833%" y="229" width="0.1945%" height="15" fill="rgb(233,223,10)" fg:x="10753" fg:w="21"/><text x="99.8333%" y="239.50"></text></g><g><title>&lt;rlox::token::Token as core::fmt::Debug&gt;::fmt (21 samples, 0.19%)</title><rect x="99.5833%" y="213" width="0.1945%" height="15" fill="rgb(215,21,27)" fg:x="10753" fg:w="21"/><text x="99.8333%" y="223.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (21 samples, 0.19%)</title><rect x="99.5833%" y="197" width="0.1945%" height="15" fill="rgb(232,23,21)" fg:x="10753" fg:w="21"/><text x="99.8333%" y="207.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (20 samples, 0.19%)</title><rect x="99.5925%" y="181" width="0.1852%" height="15" fill="rgb(244,5,23)" fg:x="10754" fg:w="20"/><text x="99.8425%" y="191.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (20 samples, 0.19%)</title><rect x="99.5925%" y="165" width="0.1852%" height="15" fill="rgb(226,81,46)" fg:x="10754" fg:w="20"/><text x="99.8425%" y="175.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (19 samples, 0.18%)</title><rect x="99.7777%" y="149" width="0.1760%" height="15" fill="rgb(247,70,30)" fg:x="10774" fg:w="19"/><text x="100.0277%" y="159.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (19 samples, 0.18%)</title><rect x="99.7777%" y="133" width="0.1760%" height="15" fill="rgb(212,68,19)" fg:x="10774" fg:w="19"/><text x="100.0277%" y="143.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (19 samples, 0.18%)</title><rect x="99.7777%" y="117" width="0.1760%" height="15" fill="rgb(240,187,13)" fg:x="10774" fg:w="19"/><text x="100.0277%" y="127.50"></text></g><g><title>__libc_write (16 samples, 0.15%)</title><rect x="99.8055%" y="101" width="0.1482%" height="15" fill="rgb(223,113,26)" fg:x="10777" fg:w="16"/><text x="100.0555%" y="111.50"></text></g><g><title>_start (10,777 samples, 99.81%)</title><rect x="0.1574%" y="613" width="99.8055%" height="15" fill="rgb(206,192,2)" fg:x="17" fg:w="10777"/><text x="0.4074%" y="623.50">_start</text></g><g><title>__libc_start_main (10,777 samples, 99.81%)</title><rect x="0.1574%" y="597" width="99.8055%" height="15" fill="rgb(241,108,4)" fg:x="17" fg:w="10777"/><text x="0.4074%" y="607.50">__libc_start_main</text></g><g><title>main (10,777 samples, 99.81%)</title><rect x="0.1574%" y="581" width="99.8055%" height="15" fill="rgb(247,173,49)" fg:x="17" fg:w="10777"/><text x="0.4074%" y="591.50">main</text></g><g><title>std::rt::lang_start_internal (10,777 samples, 99.81%)</title><rect x="0.1574%" y="565" width="99.8055%" height="15" fill="rgb(224,114,35)" fg:x="17" fg:w="10777"/><text x="0.4074%" y="575.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (10,777 samples, 99.81%)</title><rect x="0.1574%" y="549" width="99.8055%" height="15" fill="rgb(245,159,27)" fg:x="17" fg:w="10777"/><text x="0.4074%" y="559.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (10,777 samples, 99.81%)</title><rect x="0.1574%" y="533" width="99.8055%" height="15" fill="rgb(245,172,44)" fg:x="17" fg:w="10777"/><text x="0.4074%" y="543.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (10,777 samples, 99.81%)</title><rect x="0.1574%" y="517" width="99.8055%" height="15" fill="rgb(236,23,11)" fg:x="17" fg:w="10777"/><text x="0.4074%" y="527.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (10,777 samples, 99.81%)</title><rect x="0.1574%" y="501" width="99.8055%" height="15" fill="rgb(205,117,38)" fg:x="17" fg:w="10777"/><text x="0.4074%" y="511.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (10,777 samples, 99.81%)</title><rect x="0.1574%" y="485" width="99.8055%" height="15" fill="rgb(237,72,25)" fg:x="17" fg:w="10777"/><text x="0.4074%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (10,777 samples, 99.81%)</title><rect x="0.1574%" y="469" width="99.8055%" height="15" fill="rgb(244,70,9)" fg:x="17" fg:w="10777"/><text x="0.4074%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (10,777 samples, 99.81%)</title><rect x="0.1574%" y="453" width="99.8055%" height="15" fill="rgb(217,125,39)" fg:x="17" fg:w="10777"/><text x="0.4074%" y="463.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (10,777 samples, 99.81%)</title><rect x="0.1574%" y="437" width="99.8055%" height="15" fill="rgb(235,36,10)" fg:x="17" fg:w="10777"/><text x="0.4074%" y="447.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (10,777 samples, 99.81%)</title><rect x="0.1574%" y="421" width="99.8055%" height="15" fill="rgb(251,123,47)" fg:x="17" fg:w="10777"/><text x="0.4074%" y="431.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (10,777 samples, 99.81%)</title><rect x="0.1574%" y="405" width="99.8055%" height="15" fill="rgb(221,13,13)" fg:x="17" fg:w="10777"/><text x="0.4074%" y="415.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (10,777 samples, 99.81%)</title><rect x="0.1574%" y="389" width="99.8055%" height="15" fill="rgb(238,131,9)" fg:x="17" fg:w="10777"/><text x="0.4074%" y="399.50">core::ops::function::FnOnce::call_once</text></g><g><title>rlox::main (10,777 samples, 99.81%)</title><rect x="0.1574%" y="373" width="99.8055%" height="15" fill="rgb(211,50,8)" fg:x="17" fg:w="10777"/><text x="0.4074%" y="383.50">rlox::main</text></g><g><title>rlox::lox::Lox::run_file (10,777 samples, 99.81%)</title><rect x="0.1574%" y="357" width="99.8055%" height="15" fill="rgb(245,182,24)" fg:x="17" fg:w="10777"/><text x="0.4074%" y="367.50">rlox::lox::Lox::run_file</text></g><g><title>rlox::lox::Lox::run (10,777 samples, 99.81%)</title><rect x="0.1574%" y="341" width="99.8055%" height="15" fill="rgb(242,14,37)" fg:x="17" fg:w="10777"/><text x="0.4074%" y="351.50">rlox::lox::Lox::run</text></g><g><title>std::io::stdio::_print (41 samples, 0.38%)</title><rect x="99.5833%" y="325" width="0.3797%" height="15" fill="rgb(246,228,12)" fg:x="10753" fg:w="41"/><text x="99.8333%" y="335.50"></text></g><g><title>std::io::stdio::print_to (41 samples, 0.38%)</title><rect x="99.5833%" y="309" width="0.3797%" height="15" fill="rgb(213,55,15)" fg:x="10753" fg:w="41"/><text x="99.8333%" y="319.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (41 samples, 0.38%)</title><rect x="99.5833%" y="293" width="0.3797%" height="15" fill="rgb(209,9,3)" fg:x="10753" fg:w="41"/><text x="99.8333%" y="303.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (41 samples, 0.38%)</title><rect x="99.5833%" y="277" width="0.3797%" height="15" fill="rgb(230,59,30)" fg:x="10753" fg:w="41"/><text x="99.8333%" y="287.50"></text></g><g><title>std::io::Write::write_fmt (41 samples, 0.38%)</title><rect x="99.5833%" y="261" width="0.3797%" height="15" fill="rgb(209,121,21)" fg:x="10753" fg:w="41"/><text x="99.8333%" y="271.50"></text></g><g><title>core::fmt::write (41 samples, 0.38%)</title><rect x="99.5833%" y="245" width="0.3797%" height="15" fill="rgb(220,109,13)" fg:x="10753" fg:w="41"/><text x="99.8333%" y="255.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (20 samples, 0.19%)</title><rect x="99.7777%" y="229" width="0.1852%" height="15" fill="rgb(232,18,1)" fg:x="10774" fg:w="20"/><text x="100.0277%" y="239.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (20 samples, 0.19%)</title><rect x="99.7777%" y="213" width="0.1852%" height="15" fill="rgb(215,41,42)" fg:x="10774" fg:w="20"/><text x="100.0277%" y="223.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (20 samples, 0.19%)</title><rect x="99.7777%" y="197" width="0.1852%" height="15" fill="rgb(224,123,36)" fg:x="10774" fg:w="20"/><text x="100.0277%" y="207.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (20 samples, 0.19%)</title><rect x="99.7777%" y="181" width="0.1852%" height="15" fill="rgb(240,125,3)" fg:x="10774" fg:w="20"/><text x="100.0277%" y="191.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (20 samples, 0.19%)</title><rect x="99.7777%" y="165" width="0.1852%" height="15" fill="rgb(205,98,50)" fg:x="10774" fg:w="20"/><text x="100.0277%" y="175.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (2 samples, 0.02%)</title><rect x="99.9630%" y="613" width="0.0185%" height="15" fill="rgb(205,185,37)" fg:x="10794" fg:w="2"/><text x="100.2130%" y="623.50"></text></g><g><title>all (10,798 samples, 100%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(238,207,15)" fg:x="0" fg:w="10798"/><text x="0.2500%" y="655.50"></text></g><g><title>rlox (10,798 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(213,199,42)" fg:x="0" fg:w="10798"/><text x="0.2500%" y="639.50">rlox</text></g><g><title>std::io::stdio::STDOUT (2 samples, 0.02%)</title><rect x="99.9815%" y="613" width="0.0185%" height="15" fill="rgb(235,201,11)" fg:x="10796" fg:w="2"/><text x="100.2315%" y="623.50"></text></g></svg></svg>